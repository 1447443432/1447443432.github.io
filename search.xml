<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux shell 中 2_&amp;1</title>
    <url>/2023/08/07/Linux%20shell%20%E4%B8%AD%202_&amp;1/</url>
    <content><![CDATA[<h3 id="1、在Linux系统中0-1-2是一个文件描述符："><a href="#1、在Linux系统中0-1-2是一个文件描述符：" class="headerlink" title="1、在Linux系统中0 1 2是一个文件描述符："></a>1、在Linux系统中0 1 2是一个文件描述符：</h3><table>
<thead>
<tr>
<th>名称</th>
<th>代码</th>
<th>操作符</th>
<th>Java中表示</th>
<th>Linux 下文件描述符（Debian 为例)</th>
</tr>
</thead>
<tbody><tr>
<td>标准输入(stdin)</td>
<td>0</td>
<td>&lt; 或 &lt;&lt;</td>
<td>System.in</td>
<td>&#x2F;dev&#x2F;stdin -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;0 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td>
</tr>
<tr>
<td>标准输出(stdout)</td>
<td>1</td>
<td>&gt;, &gt;&gt;, 1&gt; 或 1&gt;&gt;</td>
<td>System.out</td>
<td>&#x2F;dev&#x2F;stdout -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;1 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td>
</tr>
<tr>
<td>标准错误输出(stderr)</td>
<td>2</td>
<td>2&gt; 或 2&gt;&gt;</td>
<td>System.err</td>
<td>&#x2F;dev&#x2F;stderr -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;2 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td>
</tr>
</tbody></table>
<blockquote>
<p>例如：<br>nohup java -jar app.jar &gt;log 2&gt;&amp;1 &amp;</p>
</blockquote>
<blockquote>
<p>简写：</p>
<blockquote>
<p>log 2&gt;&amp;1<br>&#x3D;&#x3D;&#x3D;》<br>&amp;&gt;log<br>或者<br>&amp;log</p>
</blockquote>
</blockquote>
<blockquote>
<p>例如：<br>nohup java -jar app.jar &amp;&gt;log &amp;</p>
</blockquote>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell7 &amp; Xftp7 个人免费版安装教程（许可弹窗解决）</title>
    <url>/2023/08/07/Xshell7%20&amp;%20Xftp7%20%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88%E8%AE%B8%E5%8F%AF%E5%BC%B9%E7%AA%97%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>官网下载：<a href="https://www.xshell.com/zh/xshell-download/">https://www.xshell.com/zh/xshell-download/</a></p>
</blockquote>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote>
<p>Xshell 和 Xftp 对家庭和学校用户提供免费许可证，个人可以免费使用（非商业），没有选项卡限制，商用需购买许可证哦。<br>需要准备一个可用的邮箱，如果没有邮箱也没关系，可以使用<a href="https://www.linshi-email.com/">临时邮箱</a>，有时不太稳定，需要多试几次。<br>这里可以选择下载 Xshell 或 Xftp ，根据自己需要下载，也可以两者都下载。点击下载会将下载链接发送到你填写的邮箱，点击链接下载（如链接不可点击，可以复制到浏览器的地址栏下载）下载完直接安装下一步即可。</p>
</blockquote>
<h1 id="弹窗解决（可选）"><a href="#弹窗解决（可选）" class="headerlink" title="弹窗解决（可选）"></a>弹窗解决（可选）</h1><blockquote>
<p>个人免费版启动关闭后会有个人免费许可说明弹窗，这个弹窗可以手动关闭，它也会自动关闭，但每次启动关闭都会有，就很烦~毕竟是提供的个人免费使用，所以能接受弹窗的话也没关系，如果不能接受，可以尝试下面的方法哦。</p>
</blockquote>
<p><strong>方式一：</strong> 使用火绒（或其他）弹窗拦截（拦截可能会闪一下）<br><strong>方式二：</strong> 汇编反编译</p>
<blockquote>
<p>在线编译器：<a href="https://hexed.it/">HexEd.it</a><br><a href="https://hexed.it/">https://hexed.it/</a></p>
</blockquote>
<p><strong>步骤：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、打开文件：找到 Xshell 或 Xftp 安装目录下的.exe文件，然后打开</span><br><span class="line"></span><br><span class="line">2、搜索替换：根据 Xshell 或 Xftp 分别搜索替换</span><br><span class="line">Xshell：搜索 74 11 6A 00 6A 07 6A 01 替换为 EB 11 6A 00 6A 07 6A 01</span><br><span class="line">Xftp：搜索 75 10 6A 00 6A 07 50 6A 替换为 EB 10 6A 00 6A 07 50 6A</span><br><span class="line"></span><br><span class="line">先输入搜索的内容，然后查找下一个，找到后，输入替换为的内容，最后点击替换。</span><br><span class="line"></span><br><span class="line">3、另存为：将修改后的文件另存到原来安装的目录，替换原有的.exe文件</span><br><span class="line"></span><br><span class="line">操作后，重新启动软件，会提示是否允许运行，点击仍要允许（刚开始可能会有点慢），</span><br><span class="line">再关闭后就发现没有弹窗提示了，完美解决。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>xshell</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统实时数据同步inotify+rsync</title>
    <url>/2023/08/29/Linux%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5inotify+rsync/</url>
    <content><![CDATA[<h3 id="一、inotify简介"><a href="#一、inotify简介" class="headerlink" title="一、inotify简介"></a>一、inotify简介</h3><p>　　inotify是Linux内核的一个功能，它能监控文件系统的变化，比如删除、读、写和卸载等操作。它监控到这些事件的发生后会默认往标准输出打印事件信息。要使用inotify，Linux内核版本必须是大于2.6.13，在这之前的内核都没有这个功能。我们可以利用inotify去监控我们要监控的资源，当资源发生变化时，我们扑捉它的事件，从而触发同步数据等操作。</p>
<h3 id="二、inotify软件介绍"><a href="#二、inotify软件介绍" class="headerlink" title="二、inotify软件介绍"></a>二、inotify软件介绍</h3><p>　　inotify是内核的一个功能，众所周知内核的功能我们必须要配合工具才能使用，通常情况下用户要使用内核的功能，都需要用户空间的软件去调用才可以达到使用内核的功能的目的，用户是无法直接操内核的。实现inotify软件有inotify-tools、sersync、lrsyncd。我们这里以inotify-tools这个软件包为例进行实验；inotify-tools包主要有两个文件，一个是inotifywait： 在被监控的文件或目录上等待特定文件系统事件（open close delete等）发生，常用于实时同步的目录监控；一个是inotifywatch：收集被监控的文件系统使用的统计数据，指文件系统事件发生的次数统计。通常情况下我们使用iontifywait就可以了。接下来我们来安装inotify-tools</p>
<h3 id="三、inotify软件安装和使用"><a href="#三、inotify软件安装和使用" class="headerlink" title="三、inotify软件安装和使用"></a>三、inotify软件安装和使用</h3><p>　　首先我们要确认我们手上的Linux系统是否支持inotify这个功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-957.27.2.el7.x86_64</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ll /proc/sys/fs/inotify/</span></span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r-- 1 root root 0 1月  31 16:29 max_queued_events</span><br><span class="line">-rw-r--r-- 1 root root 0 1月  31 16:29 max_user_instances</span><br><span class="line">-rw-r--r-- 1 root root 0 1月  31 16:29 max_user_watches</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：如果我们的内核版本高于2.6.13，并且有&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;inotify&#x2F;目录，说明我们的系统上支持inotify功能的</p>
<p>　　inotify内核参数说明</p>
<p>　　我们在&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;inotify这个目录下看到有三个文件，这三个文件就是记录inotify的内核参数的文件。其中max_queued_events这个文件记录inotify事件队列最大长度，如值太小会报Event Queue Overflow 错误，默认值：16384，当然这个值是可以更改的，临时更改可以用echo 命令加上值给重定向到这个文件中。永久修改需要修改编辑&#x2F;etc&#x2F;sysctl.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /proc/sys/fs/inotify/max_queued_events</span></span><br><span class="line">16384</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># echo &#x27;fs.inotify.max_queued_events=999999&#x27; &gt;&gt; /etc/sysctl.conf                   </span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/sysctl.conf</span></span><br><span class="line"><span class="comment"># sysctl settings are defined through files in</span></span><br><span class="line"><span class="comment"># /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Vendors settings live in /usr/lib/sysctl.d/.</span></span><br><span class="line"><span class="comment"># To override a whole file, create a new file with the same in</span></span><br><span class="line"><span class="comment"># /etc/sysctl.d/ and put new settings there. To override</span></span><br><span class="line"><span class="comment"># only specific settings, add a file with a lexically later</span></span><br><span class="line"><span class="comment"># name in /etc/sysctl.d/ and put new settings there.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, see sysctl.conf(5) and sysctl.d(5).</span></span><br><span class="line">fs.inotify.max_queued_events=999999</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># sysctl -p</span></span><br><span class="line">fs.inotify.max_queued_events = 999999</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /proc/sys/fs/inotify/max_queued_events</span></span><br><span class="line">999999</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：修改内核其他参数，也是是类似的方法。</p>
<p>　　max_user_watches：这个文件主要存放单个进程监控文件的数量，默认是8129；生产环境中如果监控的文件数量庞大，可以通过上面的方式去修改这个值</p>
<p>　　max_user_instances:这个文件存放用户创建inotify实例的最大值，默认是128；同样也是可以通过上面的方式修改</p>
<h5 id="inotify软件安装"><a href="#inotify软件安装" class="headerlink" title="inotify软件安装"></a>inotify软件安装</h5><p>　　参考文档<a href="https://github.com/inotify-tools/inotify-tools/wiki">https://github.com/inotify-tools/inotify-tools/wiki</a></p>
<p>　　inotify是基于epel源，在用yum安装前请先配好yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># yum info inotify-tools</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">可安装的软件包</span><br><span class="line">名称    ：inotify-tools</span><br><span class="line">架构    ：x86_64</span><br><span class="line">版本    ：3.14</span><br><span class="line">发布    ：9.el7</span><br><span class="line">大小    ：51 k</span><br><span class="line">源    ：epel/x86_64</span><br><span class="line">简介    ： Command line utilities <span class="keyword">for</span> inotify</span><br><span class="line">网址    ：http://inotify-tools.sourceforge.net/</span><br><span class="line">协议    ： GPLv2</span><br><span class="line">描述    ： inotify-tools is a <span class="built_in">set</span> of command-line programs <span class="keyword">for</span> Linux providing</span><br><span class="line">         : a simple interface to inotify. These programs can be used to monitor</span><br><span class="line">         : and act upon filesystem events.</span><br><span class="line"> </span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：如果用yum可以看到inotify-tools的说明信息，说明你的Linux yum仓库里有这个软件包，可以直接yum 安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># yum install -y inotify-tools</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">base                                                                                                      | 3.6 kB  00:00:00  </span><br><span class="line">dockerrepo                                                                                                | 2.9 kB  00:00:00  </span><br><span class="line">epel                                                                                                      | 5.3 kB  00:00:00  </span><br><span class="line">extras                                                                                                    | 2.9 kB  00:00:00  </span><br><span class="line">updates                                                                                                   | 2.9 kB  00:00:00  </span><br><span class="line">updates/7/x86_64/primary_db                                                                               | 5.9 MB  00:00:01  </span><br><span class="line">正在解决依赖关系</span><br><span class="line">--&gt; 正在检查事务</span><br><span class="line">---&gt; 软件包 inotify-tools.x86_64.0.3.14-9.el7 将被 安装</span><br><span class="line">--&gt; 解决依赖关系完成</span><br><span class="line"> </span><br><span class="line">依赖关系解决</span><br><span class="line"> </span><br><span class="line">=================================================================================================================================</span><br><span class="line"> Package                            架构                        版本                             源                         大小</span><br><span class="line">=================================================================================================================================</span><br><span class="line">正在安装:</span><br><span class="line"> inotify-tools                      x86_64                      3.14-9.el7                       epel                       51 k</span><br><span class="line"> </span><br><span class="line">事务概要</span><br><span class="line">=================================================================================================================================</span><br><span class="line">安装  1 软件包</span><br><span class="line"> </span><br><span class="line">总下载量：51 k</span><br><span class="line">安装大小：111 k</span><br><span class="line">Downloading packages:</span><br><span class="line">inotify-tools-3.14-9.el7.x86_64.rpm                                                                       |  51 kB  00:00:00  </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在安装    : inotify-tools-3.14-9.el7.x86_64                                                                              1/1</span><br><span class="line">  验证中      : inotify-tools-3.14-9.el7.x86_64                                                                              1/1</span><br><span class="line"> </span><br><span class="line">已安装:</span><br><span class="line">  inotify-tools.x86_64 0:3.14-9.el7                                                                                           </span><br><span class="line"> </span><br><span class="line">完毕！</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：我们安装好软件包要习惯的去看这个软件包装了那些东西，它的配置文件大概放在哪个位置等信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># rpm -ql inotify-tools</span></span><br><span class="line">/usr/bin/inotifywait</span><br><span class="line">/usr/bin/inotifywatch</span><br><span class="line">/usr/lib64/libinotifytools.so.0</span><br><span class="line">/usr/lib64/libinotifytools.so.0.4.1</span><br><span class="line">/usr/share/doc/inotify-tools-3.14</span><br><span class="line">/usr/share/doc/inotify-tools-3.14/AUTHORS</span><br><span class="line">/usr/share/doc/inotify-tools-3.14/COPYING</span><br><span class="line">/usr/share/doc/inotify-tools-3.14/ChangeLog</span><br><span class="line">/usr/share/doc/inotify-tools-3.14/NEWS</span><br><span class="line">/usr/share/doc/inotify-tools-3.14/README</span><br><span class="line">/usr/share/man/man1/inotifywait.1.gz</span><br><span class="line">/usr/share/man/man1/inotifywatch.1.gz</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：从上面查询的信息我们可以清楚的知道，inotify-tools这两个包主要安装了两个程序，一个是&#x2F;usr&#x2F;bin&#x2F;inotifywait，一个是&#x2F;usr&#x2F;bin&#x2F;inotifywatch，其他都是它的帮助文档；在上面的介绍了这两个程序的作用；安装好了inotify工具后，我们再来看看inotifywait这个工具的用法和选项</p>
<p>inotifywait命令常见选项说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># inotifywait --help</span></span><br><span class="line">inotifywait 3.14</span><br><span class="line">Wait <span class="keyword">for</span> a particular event on a file or <span class="built_in">set</span> of files.</span><br><span class="line">Usage: inotifywait [ options ] file1 [ file2 ] [ file3 ] [ ... ]</span><br><span class="line">Options:</span><br><span class="line">        -h|--<span class="built_in">help</span>       Show this <span class="built_in">help</span> text.</span><br><span class="line">        @&lt;file&gt;         Exclude the specified file from being watched.</span><br><span class="line">        --exclude &lt;pattern&gt;</span><br><span class="line">                        Exclude all events on files matching the</span><br><span class="line">                        extended regular expression &lt;pattern&gt;.</span><br><span class="line">        --excludei &lt;pattern&gt;</span><br><span class="line">                        Like --exclude but <span class="keyword">case</span> insensitive.</span><br><span class="line">        -m|--monitor    Keep listening <span class="keyword">for</span> events forever.  Without</span><br><span class="line">                        this option, inotifywait will <span class="built_in">exit</span> after one</span><br><span class="line">                        event is received.</span><br><span class="line">        -d|--daemon     Same as --monitor, except run <span class="keyword">in</span> the background</span><br><span class="line">                        logging events to a file specified by --outfile.</span><br><span class="line">                        Implies --syslog.</span><br><span class="line">        -r|--recursive  Watch directories recursively.</span><br><span class="line">        --fromfile &lt;file&gt;</span><br><span class="line">                        Read files to watch from &lt;file&gt; or `-<span class="string">&#x27; for stdin.</span></span><br><span class="line"><span class="string">        -o|--outfile &lt;file&gt;</span></span><br><span class="line"><span class="string">                        Print events to &lt;file&gt; rather than stdout.</span></span><br><span class="line"><span class="string">        -s|--syslog     Send errors to syslog rather than stderr.</span></span><br><span class="line"><span class="string">        -q|--quiet      Print less (only print events).</span></span><br><span class="line"><span class="string">        -qq             Print nothing (not even events).</span></span><br><span class="line"><span class="string">        --format &lt;fmt&gt;  Print using a specified printf-like format</span></span><br><span class="line"><span class="string">                        string; read the man page for more details.</span></span><br><span class="line"><span class="string">        --timefmt &lt;fmt&gt; strftime-compatible format string for use with</span></span><br><span class="line"><span class="string">                        %T in --format string.</span></span><br><span class="line"><span class="string">        -c|--csv        Print events in CSV format.</span></span><br><span class="line"><span class="string">        -t|--timeout &lt;seconds&gt;</span></span><br><span class="line"><span class="string">                        When listening for a single event, time out after</span></span><br><span class="line"><span class="string">                        waiting for an event for &lt;seconds&gt; seconds.</span></span><br><span class="line"><span class="string">                        If &lt;seconds&gt; is 0, inotifywait will never time out.</span></span><br><span class="line"><span class="string">        -e|--event &lt;event1&gt; [ -e|--event &lt;event2&gt; ... ]</span></span><br><span class="line"><span class="string">                Listen for specific event(s).  If omitted, all events are</span></span><br><span class="line"><span class="string">                listened for.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Exit status:</span></span><br><span class="line"><span class="string">        0  -  An event you asked to watch for was received.</span></span><br><span class="line"><span class="string">        1  -  An event you did not ask to watch for was received</span></span><br><span class="line"><span class="string">              (usually delete_self or unmount), or some error occurred.</span></span><br><span class="line"><span class="string">        2  -  The --timeout option was given and no events occurred</span></span><br><span class="line"><span class="string">              in the specified interval of time.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Events:</span></span><br><span class="line"><span class="string">        access          file or directory contents were read</span></span><br><span class="line"><span class="string">        modify          file or directory contents were written</span></span><br><span class="line"><span class="string">        attrib          file or directory attributes changed</span></span><br><span class="line"><span class="string">        close_write     file or directory closed, after being opened in</span></span><br><span class="line"><span class="string">                        writeable mode</span></span><br><span class="line"><span class="string">        close_nowrite   file or directory closed, after being opened in</span></span><br><span class="line"><span class="string">                        read-only mode</span></span><br><span class="line"><span class="string">        close           file or directory closed, regardless of read/write mode</span></span><br><span class="line"><span class="string">        open            file or directory opened</span></span><br><span class="line"><span class="string">        moved_to        file or directory moved to watched directory</span></span><br><span class="line"><span class="string">        moved_from      file or directory moved from watched directory</span></span><br><span class="line"><span class="string">        move            file or directory moved to or from watched directory</span></span><br><span class="line"><span class="string">        create          file or directory created within watched directory</span></span><br><span class="line"><span class="string">        delete          file or directory deleted within watched directory</span></span><br><span class="line"><span class="string">        delete_self     file or directory was deleted</span></span><br><span class="line"><span class="string">        unmount         file system containing file or directory unmounted</span></span><br><span class="line"><span class="string">[root@test ~]#</span></span><br></pre></td></tr></table></figure>

<p>提示：-m，–monitor表示始终保持事件监听，如果不加这个选项，默认它只是监控一次，也就是说只要我们监控的目录里的资源发生一次变化后，它就退出监控了；通常情况我们是结合-m选项持续的监控一个目录下的资源变化情况；-d表示以守护进程方式执行，和-m相似，配合-o使用。-d选项我们可以理解为后台守护进程的方式监控我们的资源，后台守护进程的方式执行我们是看不到说监控的资源变化情况，我们可以结合-o来指定一个文件，把资源变化情况类似写日志的方式给记录下来； -r, –recursive表示递归监控目录数据信息变化；-q,–quiet表示输出少量事件信息；–timefmt 表示指定输出事件的时间格式；–format 表示指定的输出格式；即实际监控输出内容； -e 表示指定监听指定的事件，如果省略，表示所有事件都进行监听；–exclude 表示指定排除文件或目录，使用扩展的正则表达式匹配的模式实现；–excludei 和exclude相似，不区分大小写； -o, –outfile 打印事件到文件中，相当于标准正确输出；-s, –syslogOutput 发送错误到syslog相当于标准错误输出</p>
<p>　　–timefmt 时间格式</p>
<p>　　　　%Y：表示年份信息，包含世纪信息</p>
<p>　　　　%y：表示年份信息，不包含世纪信息</p>
<p>　　　　%m：表示月份，范围01-12</p>
<p>　　　　%d：表示每月的第几天，范围01-31</p>
<p>　　　　%H：表示小时信息，使用24小时制度，范围00-24</p>
<p>　　　　%M：表示分钟，范围00-59</p>
<p>　　–format输出信息格式定义</p>
<p>　　　　%T：输出时间格式中定义的时间格式，这个表示调用我们前面定义时间格式，通常情况–timefmt选项和–format结合使用</p>
<p>　　　　%w：表示事件出现时，监控文件或目录的名称信息。也就是监控资源名称信息</p>
<p>　　　　%f：时间出现时，显示监控目录下触发事件的文件或目录信息</p>
<p>　　　　%e：显示发生的事件信息，不同事件默认用逗号分隔</p>
<p>　　　　%Xe：显示发生的事件，不同的时间指定用”X”分割</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># inotifywait -m --timefmt &quot;%Y-%m-%d %H:%M&quot; --format &quot;%T %w event:%;e&quot; /root/dir2</span></span><br><span class="line">Setting up watches.</span><br><span class="line">Watches established.</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:OPEN;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:CLOSE_NOWRITE;CLOSE;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:OPEN;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:CLOSE_NOWRITE;CLOSE;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:OPEN;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:CLOSE_NOWRITE;CLOSE;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:OPEN;ISDIR</span><br><span class="line">2020-01-31 18:07 /root/dir2/ event:CLOSE_NOWRITE;CLOSE;ISDIR</span><br></pre></td></tr></table></figure>

<p>提示：指定信息不输出变化资源的文件名和目录，输出信息格式如上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># inotifywait -m --timefmt &quot;%Y-%m-%d %H:%M&quot; --format &quot;%T %w%f event:%;e&quot; /root/dir2</span></span><br><span class="line">Setting up watches.</span><br><span class="line">Watches established.</span><br><span class="line">2020-01-31 18:09 /root/dir2/test event:OPEN;ISDIR</span><br><span class="line">2020-01-31 18:09 /root/dir2/test event:CLOSE_NOWRITE;CLOSE;ISDIR</span><br><span class="line">2020-01-31 18:09 /root/dir2/ event:OPEN;ISDIR</span><br><span class="line">2020-01-31 18:09 /root/dir2/ event:CLOSE_NOWRITE;CLOSE;ISDIR</span><br><span class="line">2020-01-31 18:09 /root/dir2/f1 event:CREATE</span><br><span class="line">2020-01-31 18:09 /root/dir2/f1 event:OPEN</span><br><span class="line">2020-01-31 18:09 /root/dir2/f1 event:ATTRIB</span><br><span class="line">2020-01-31 18:09 /root/dir2/f1 event:CLOSE_WRITE;CLOSE</span><br><span class="line">2020-01-31 18:09 /root/dir2/f1 event:MOVED_FROM</span><br><span class="line">2020-01-31 18:09 /root/dir2/ff event:MOVED_TO</span><br></pre></td></tr></table></figure>

<p>提示：指定信息输出变化资源的文件名和目录，输出信息格式如上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># inotifywait -m --timefmt &quot;%Y-%m-%d %H:%M&quot; --format &quot;%T %w%f %e&quot; /root/dir2    </span></span><br><span class="line">Setting up watches.</span><br><span class="line">Watches established.</span><br><span class="line">2020-01-31 18:10 /root/dir2/ OPEN,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ CLOSE_NOWRITE,CLOSE,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ OPEN,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ CLOSE_NOWRITE,CLOSE,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ OPEN,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ CLOSE_NOWRITE,CLOSE,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ OPEN,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/ CLOSE_NOWRITE,CLOSE,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/test OPEN,ISDIR</span><br><span class="line">2020-01-31 18:10 /root/dir2/test CLOSE_NOWRITE,CLOSE,ISDIR</span><br></pre></td></tr></table></figure>

<p>　　提示：不指定输出事件信息分割符，默认是逗号分隔</p>
<p>　　-e选项指定监控事件类型说明</p>
<p>　　　　create：表示文件或目录的创建</p>
<p>　　　　delete：表示文件或目录被删除</p>
<p>　　　　modify：表示文件或目录内容的修改</p>
<p>　　　　attrib：表示文件或目录的属性发生变化</p>
<p>　　　　close_write：表示文件或目录关闭，在写入模式打开之后关闭的</p>
<p>　　　　close_nowrite：表示文件或目录关闭，在只读模式打开之后关闭的</p>
<p>　　　　close：表示文件或目录关闭，不管是读还是写模式</p>
<p>　　　　open：文件或目录被打开</p>
<p>　　　　moved_to：表示文件被移动到监控目录中</p>
<p>　　　　moved_from：表示文件或目录从监控的目录中被移动</p>
<p>　　　　move：文件或目录不管移动到或移出监控目录都触发事件</p>
<p>　　　　access：表示文件或目录内容读取</p>
<p>　　　　delete_self：表示文件或目录被删除，目录本身被删除</p>
<p>　　　　unmount：表示取消挂载</p>
<p><img src="https://pic4.zhimg.com/80/v2-ec8ab1a16afbd5441b00199d6c34b517_1440w.webp"></p>
<p>提示：-e选项指定监控目录下文件或目录的事件，它只响应对应目录下的文件发生了指定事件后，才给予响应。以上表示只要&#x2F;root&#x2F;dir2目录下的文件或目录发生了create,delete,move这三种事件的任何一种，它都给予响应，我们查看&#x2F;root&#x2F;dir2下的文件它是不监控的，也不予响应。</p>
<p>了解了inotifywait命令的各种选项的使用后，我们就可以根据自己的实际需求来定义怎么监控我们的资源，当资源发生变化时，我们后续该怎么处理，这个不是inotify关心的事，它只负责告诉我们监控的资源发生了什么样的变化。如果我们想要备份变化后的资源，我们就需要用到别的服务，比如rsync;rsync这个软件是一个同步数据软件，它可以通过脚本和inotify结合实现，当资源文件发生变化时，触发rsync去同步数据，这样实现数据实时的同步。接下来我们在来搭建rsync服务</p>
<h3 id="四、rsync服务安装配置"><a href="#四、rsync服务安装配置" class="headerlink" title="四、rsync服务安装配置"></a>四、rsync服务安装配置</h3><h5 id="1、查看系统是否安装的有rsync，如果没有就安装"><a href="#1、查看系统是否安装的有rsync，如果没有就安装" class="headerlink" title="1、查看系统是否安装的有rsync，如果没有就安装"></a>1、查看系统是否安装的有rsync，如果没有就安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># rpm -qa rsync</span></span><br><span class="line">rsync-3.1.2-6.el7_6.1.x86_64</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># yum info rsync</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">已安装的软件包</span><br><span class="line">名称    ：rsync</span><br><span class="line">架构    ：x86_64</span><br><span class="line">版本    ：3.1.2</span><br><span class="line">发布    ：6.el7_6.1</span><br><span class="line">大小    ：815 k</span><br><span class="line">源    ：installed</span><br><span class="line">来自源：updates</span><br><span class="line">简介    ： A program <span class="keyword">for</span> synchronizing files over a network</span><br><span class="line">网址    ：http://rsync.samba.org/</span><br><span class="line">协议    ： GPLv3+</span><br><span class="line">描述    ： Rsync uses a reliable algorithm to bring remote and host files into</span><br><span class="line">         : <span class="built_in">sync</span> very quickly. Rsync is fast because it just sends the differences</span><br><span class="line">         : <span class="keyword">in</span> the files over the network instead of sending the complete</span><br><span class="line">         : files. Rsync is often used as a very powerful mirroring process or</span><br><span class="line">         : just as a more capable replacement <span class="keyword">for</span> the rcp <span class="built_in">command</span>. A technical</span><br><span class="line">         : report <span class="built_in">which</span> describes the rsync algorithm is included <span class="keyword">in</span> this</span><br><span class="line">         : package.</span><br><span class="line"> </span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h5 id="2、查看rsync配置文件路径"><a href="#2、查看rsync配置文件路径" class="headerlink" title="2、查看rsync配置文件路径"></a>2、查看rsync配置文件路径</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># rpm -ql rsync</span></span><br><span class="line">/etc/rsyncd.conf</span><br><span class="line">/etc/sysconfig/rsyncd</span><br><span class="line">/usr/bin/rsync</span><br><span class="line">/usr/lib/systemd/system/rsyncd.service</span><br><span class="line">/usr/lib/systemd/system/rsyncd.socket</span><br><span class="line">/usr/lib/systemd/system/rsyncd@.service</span><br><span class="line">/usr/share/doc/rsync-3.1.2</span><br><span class="line">/usr/share/doc/rsync-3.1.2/COPYING</span><br><span class="line">/usr/share/doc/rsync-3.1.2/NEWS</span><br><span class="line">/usr/share/doc/rsync-3.1.2/OLDNEWS</span><br><span class="line">/usr/share/doc/rsync-3.1.2/README</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/Makefile</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/atomic-rsync</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/cvs2includes</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/deny-rsync</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/file-attr-restore</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/files-to-excludes</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/git-set-file-times</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/instant-rsyncd</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/logfilter</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/lsh</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/lsh.sh</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/mapfrom</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/mapto</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/mnt-excl</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/munge-symlinks</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/rrsync</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/rsync-no-vanished</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/rsync-slash-strip</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/rsyncstats</span><br><span class="line">/usr/share/doc/rsync-3.1.2/support/savetransfer.c</span><br><span class="line">/usr/share/doc/rsync-3.1.2/tech_report.tex</span><br><span class="line">/usr/share/man/man1/rsync.1.gz</span><br><span class="line">/usr/share/man/man5/rsyncd.conf.5.gz</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：可从上面的信息了解到rsync的配置文件是&#x2F;etc&#x2F;rsyncd.conf，二进制文件是&#x2F;usr&#x2F;bin&#x2F;rsync</p>
<h5 id="3、-etc-rsyncd-conf配置文件内容说明"><a href="#3、-etc-rsyncd-conf配置文件内容说明" class="headerlink" title="3、&#x2F;etc&#x2F;rsyncd.conf配置文件内容说明"></a>3、&#x2F;etc&#x2F;rsyncd.conf配置文件内容说明</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/rsyncd.conf</span></span><br><span class="line"><span class="comment"># /etc/rsyncd: configuration file for rsync daemon mode</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># configuration example:</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># uid = nobody</span></span><br><span class="line"><span class="comment"># gid = nobody</span></span><br><span class="line"><span class="comment"># use chroot = yes</span></span><br><span class="line"><span class="comment"># max connections = 4</span></span><br><span class="line"><span class="comment"># pid file = /var/run/rsyncd.pid</span></span><br><span class="line"><span class="comment"># exclude = lost+found/</span></span><br><span class="line"><span class="comment"># transfer logging = yes</span></span><br><span class="line"><span class="comment"># timeout = 900</span></span><br><span class="line"><span class="comment"># ignore nonreadable = yes</span></span><br><span class="line"><span class="comment"># dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># [ftp]</span></span><br><span class="line"><span class="comment">#        path = /home/ftp</span></span><br><span class="line"><span class="comment">#        comment = ftp export area</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：我们打开rsync的配置文件，里面内容告诉我们，这个配置文件用于rsync工作为独立守护进程的服务配置，我们可以通过man rsyncd.conf来查看里面的选项说明</p>
<h5 id="4、编辑-etc-rsyncd-conf"><a href="#4、编辑-etc-rsyncd-conf" class="headerlink" title="4、编辑&#x2F;etc&#x2F;rsyncd.conf"></a>4、编辑&#x2F;etc&#x2F;rsyncd.conf</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/rsyncd.conf</span></span><br><span class="line"><span class="comment"># /etc/rsyncd: configuration file for rsync daemon mode</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># configuration example:</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># uid = nobody</span></span><br><span class="line"><span class="comment"># gid = nobody</span></span><br><span class="line"><span class="comment"># use chroot = yes</span></span><br><span class="line"><span class="comment"># max connections = 4</span></span><br><span class="line"><span class="comment"># pid file = /var/run/rsyncd.pid</span></span><br><span class="line"><span class="comment"># exclude = lost+found/</span></span><br><span class="line"><span class="comment"># transfer logging = yes</span></span><br><span class="line"><span class="comment"># timeout = 900</span></span><br><span class="line"><span class="comment"># ignore nonreadable = yes</span></span><br><span class="line"><span class="comment"># dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># [ftp]</span></span><br><span class="line"><span class="comment">#        path = /home/ftp</span></span><br><span class="line"><span class="comment">#        comment = ftp export area</span></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">use <span class="built_in">chroot</span> = no</span><br><span class="line">max connections = 0</span><br><span class="line">ignore errors</span><br><span class="line">exclude = lost+found/</span><br><span class="line"><span class="built_in">log</span> file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.lock</span><br><span class="line">reverse lookup = no</span><br><span class="line">hosts allow = 192.168.0.0/24</span><br><span class="line">[backup]</span><br><span class="line">path = /backup/</span><br><span class="line">comment = backup</span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line">auth <span class="built_in">users</span> = rsyncuser</span><br><span class="line">secrets file = /etc/rsync.pass</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：uid，gid表示rsync这个服务是以那个用户的身份去运行；use chroot表示是否可切换指定path里的路径，如果是yes表示在传输文件之前首先 chroot 到 path 参数所指定的目录下。这样做的原因是实现额外的安全防护，但是缺点是需要 root并且不能备份指向 path 外部的符号连接所指向的目录文件；max connections表示指定最大并发连接数，0表示不限制；ignore errors表示忽略守护进程上的I&#x2F;O错误；exclude表示排除监控的资源列表，也就是exclude后面的资源不监控；log file、pid file、lock file指定日志文件，pid文件，lock文件的路径；reverse lookup表示是否使用名称解析（控制守护进程是否对客户端IP地址执行反向查找以确定其主机名）；hosts allow表示指定允许的主机或网段内的主机来访问rsync服务器；[backup] 这个表示共享出来的目录共享名称，这个同samba的配置一样，这个名称只是对客户端看到共享出来的目录名称，它不是真的服务器路径名称；path表示指定真实存放同步数据的路径，也就是共享出去的名称对应到系统上的那个目录；comment表示描述说明；auth users表示那些用户可以访问这个目录；secrets file表示auth users的用户的密码信息文件</p>
<h5 id="5、准备备份数据目录和创建secrets-file所指定的用户密码文件，并把auth-users所指定的用户和密码信息写入到该文件中"><a href="#5、准备备份数据目录和创建secrets-file所指定的用户密码文件，并把auth-users所指定的用户和密码信息写入到该文件中" class="headerlink" title="5、准备备份数据目录和创建secrets file所指定的用户密码文件，并把auth users所指定的用户和密码信息写入到该文件中"></a>5、准备备份数据目录和创建secrets file所指定的用户密码文件，并把auth users所指定的用户和密码信息写入到该文件中</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># mkdir /backup</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># echo &#x27;rsyncuser:admin&#x27; &gt; /etc/rsync.pass</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/rsync.pass</span></span><br><span class="line">rsyncuser:admin</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># chmod 600 /etc/rsync.pass</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ll /etc/rsync.pass</span></span><br><span class="line">-rw------- 1 root root 16 1月  31 19:27 /etc/rsync.pass</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：&#x2F;etc&#x2F;rsync.pass这个文件是secrets file指定的文件，它相当于一个虚拟的用户文件，不需要存在Linux系统中，这个文件主要保存用于同步数据时，所用到的用户；通常情况下为了rsync的用户信息安全，建议把这个文件的权限修改成600</p>
<h5 id="6、启动rsync服务以Daemon方式运行，并检查端口运行情况"><a href="#6、启动rsync服务以Daemon方式运行，并检查端口运行情况" class="headerlink" title="6、启动rsync服务以Daemon方式运行，并检查端口运行情况"></a>6、启动rsync服务以Daemon方式运行，并检查端口运行情况</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ss -ntl</span></span><br><span class="line">State       Recv-Q Send-Q                   Local Address:Port                                  Peer Address:Port           </span><br><span class="line">LISTEN      0      100                          127.0.0.1:25                                               *:*               </span><br><span class="line">LISTEN      0      25                                   *:514                                              *:*               </span><br><span class="line">LISTEN      0      128                                  *:41319                                            *:*               </span><br><span class="line">LISTEN      0      50                                   *:3306                                             *:*               </span><br><span class="line">LISTEN      0      128                                  *:111                                              *:*               </span><br><span class="line">LISTEN      0      100                                ::1:25                                              :::*               </span><br><span class="line">LISTEN      0      25                                  :::514                                             :::*               </span><br><span class="line">LISTEN      0      128                                 :::41319                                           :::*               </span><br><span class="line">LISTEN      0      128                                 :::111                                             :::*               </span><br><span class="line">LISTEN      0      128                                 :::80                                              :::*               </span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># rsync --daemon</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ss -ntl</span></span><br><span class="line">State       Recv-Q Send-Q                   Local Address:Port                                  Peer Address:Port           </span><br><span class="line">LISTEN      0      100                          127.0.0.1:25                                               *:*               </span><br><span class="line">LISTEN      0      25                                   *:514                                              *:*               </span><br><span class="line">LISTEN      0      128                                  *:41319                                            *:*               </span><br><span class="line">LISTEN      0      5                                    *:873                                              *:*               </span><br><span class="line">LISTEN      0      50                                   *:3306                                             *:*               </span><br><span class="line">LISTEN      0      128                                  *:111                                              *:*               </span><br><span class="line">LISTEN      0      100                                ::1:25                                              :::*               </span><br><span class="line">LISTEN      0      25                                  :::514                                             :::*               </span><br><span class="line">LISTEN      0      128                                 :::41319                                           :::*               </span><br><span class="line">LISTEN      0      5                                   :::873                                             :::*               </span><br><span class="line">LISTEN      0      128                                 :::111                                             :::*               </span><br><span class="line">LISTEN      0      128                                 :::80                                              :::*               </span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：rsync默认端口是873 当然也可以通过在配置文件中用port 来指定</p>
<h5 id="7、在客户端上创建密码文件"><a href="#7、在客户端上创建密码文件" class="headerlink" title="7、在客户端上创建密码文件"></a>7、在客户端上创建密码文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test-centos7-node1 ~]<span class="comment"># echo &quot;admin&quot; &gt;/etc/rsync.pass </span></span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment"># chmod 600 /etc/rsync.pass</span></span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment"># ll /etc/rsync.pass</span></span><br><span class="line">-rw------- 1 root root 6 Feb  1 03:38 /etc/rsync.pass</span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h5 id="8、在客户端测试rsync是否可以把指定文件同步到rsync共享出来的backup下（这里的backup不是指服务器上的真实路径，是中括号里指定的名称，这个名称可以随便起，没有特殊要求）"><a href="#8、在客户端测试rsync是否可以把指定文件同步到rsync共享出来的backup下（这里的backup不是指服务器上的真实路径，是中括号里指定的名称，这个名称可以随便起，没有特殊要求）" class="headerlink" title="8、在客户端测试rsync是否可以把指定文件同步到rsync共享出来的backup下（这里的backup不是指服务器上的真实路径，是中括号里指定的名称，这个名称可以随便起，没有特殊要求）"></a>8、在客户端测试rsync是否可以把指定文件同步到rsync共享出来的backup下（这里的backup不是指服务器上的真实路径，是中括号里指定的名称，这个名称可以随便起，没有特殊要求）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test-centos7-node1 ~]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line"> </span><br><span class="line">1 directory, 0 files</span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment"># echo &quot;this is test file&quot; &gt;test/f1</span></span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment"># rsync -avz --password-file=/etc/rsync.pass /root/test/ rsyncuser@192.168.0.99::backup</span></span><br><span class="line">sending incremental file list</span><br><span class="line">./</span><br><span class="line">f1</span><br><span class="line"> </span><br><span class="line">sent 93 bytes  received 30 bytes  246.00 bytes/sec</span><br><span class="line">total size is 18  speedup is 0.15</span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：可以看到在客户端已经把指定的资源给同步到rsync服务器上了，接下来我们看看rsync指定存放同步数据的目录是否有客户端同步过来的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ll /backup</span></span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 root root 18 2月   1 2020 f1</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /backup/f1</span></span><br><span class="line">this is <span class="built_in">test</span> file</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：在服务端可以看到客户端同步过来的文件；到此rsync服务就搭建完毕了。接下来我们编写脚本结合inotify和rsync实现实时同步</p>
<h3 id="五、在客户端编写脚本实现inotify-rsync实现实时同步"><a href="#五、在客户端编写脚本实现inotify-rsync实现实时同步" class="headerlink" title="五、在客户端编写脚本实现inotify+rsync实现实时同步"></a>五、在客户端编写脚本实现inotify+rsync实现实时同步</h3><p>实验环境：centos7是客户端，在上面安装inotify-tools工具；centos7是rsync服务端；实验目的是实现实时监控centos7上的&#x2F;root&#x2F;test&#x2F;目录下的所有资源，如果有变化就把文件通过rsync推送到rsync服务器上，实现实时同步</p>
<h5 id="1、在centos7上安装inotify-tools"><a href="#1、在centos7上安装inotify-tools" class="headerlink" title="1、在centos7上安装inotify-tools"></a>1、在centos7上安装inotify-tools</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test-centos7-node1 ~]<span class="comment"># yum install -y inotify-tools</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Setting up Install Process</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cn99.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">base                                                                              | 3.7 kB     00:00  </span><br><span class="line">epel                                                                              | 5.3 kB     00:00  </span><br><span class="line">extras                                                                            | 3.4 kB     00:00  </span><br><span class="line">my_base                                                                           | 4.0 kB     00:00  </span><br><span class="line">percona-release-noarch                                                            | 2.9 kB     00:00  </span><br><span class="line">percona-release-x86_64                                                            | 2.9 kB     00:00  </span><br><span class="line">updates                                                                           | 3.4 kB     00:00  </span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package inotify-tools.x86_64 0:3.14-2.el6 will be installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"> </span><br><span class="line">Dependencies Resolved</span><br><span class="line"> </span><br><span class="line">=========================================================================================================</span><br><span class="line"> Package                      Arch                  Version                    Repository           Size</span><br><span class="line">=========================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> inotify-tools                x86_64                3.14-2.el6                 epel                 46 k</span><br><span class="line"> </span><br><span class="line">Transaction Summary</span><br><span class="line">=========================================================================================================</span><br><span class="line">Install       1 Package(s)</span><br><span class="line"> </span><br><span class="line">Total download size: 46 k</span><br><span class="line">Installed size: 104 k</span><br><span class="line">Downloading Packages:</span><br><span class="line">inotify-tools-3.14-2.el6.x86_64.rpm                                               |  46 kB     00:00  </span><br><span class="line">Running rpm_check_debug</span><br><span class="line">Running Transaction Test</span><br><span class="line">Transaction Test Succeeded</span><br><span class="line">Running Transaction</span><br><span class="line">  Installing : inotify-tools-3.14-2.el6.x86_64                                                       1/1</span><br><span class="line">  Verifying  : inotify-tools-3.14-2.el6.x86_64                                                       1/1</span><br><span class="line"> </span><br><span class="line">Installed:</span><br><span class="line">  inotify-tools.x86_64 0:3.14-2.el6                                                                   </span><br><span class="line"> </span><br><span class="line">Complete!</span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h5 id="2、编写脚本"><a href="#2、编写脚本" class="headerlink" title="2、编写脚本"></a>2、编写脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test-centos7-node1 ~]<span class="comment"># cat inotify_rsync.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">SRC=<span class="string">&#x27;/root/test/&#x27;</span></span><br><span class="line">DEST=<span class="string">&#x27;rsyncuser@192.168.0.99::backup&#x27;</span></span><br><span class="line">inotifywait -mrq --timefmt <span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span> --format <span class="string">&#x27;%T %w %f&#x27;</span> -e create,delete,moved_to,close_write <span class="variable">$&#123;SRC&#125;</span> |<span class="keyword">while</span> <span class="built_in">read</span> DATE TIME DIR FILE;<span class="keyword">do</span></span><br><span class="line">        FILEPATH=<span class="variable">$&#123;DIR&#125;</span><span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">        rsync -az --delete --password-file=/etc/rsync.pass <span class="variable">$SRC</span> <span class="variable">$DEST</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;At <span class="variable">$&#123;TIME&#125;</span> on <span class="variable">$&#123;DATE&#125;</span>, file <span class="variable">$FILEPATH</span> was backuped up via rsync&quot;</span> &gt;&gt; /var/log/changelist.log</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@test-centos7-node1 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提示：解释下上面的脚本，首先我们定义要监控的目录src和rsync的地址dest(这个地址就是客户端rsync连接rsync服务端的地址)，然后通过inotifywait来指定监控的资源和事件，以及输出信息的格式，然后每一次触发事件的输出信息就交给while read处理，while read 把事件输出信息分别用DATA TIME DIR FILE来保存；然后把DIR和FILE做合并，得到变化资源的真实路径，然后通过rsync把变化的资源推到rsync服务器上，然后把对应的事件信息写到&#x2F;var&#x2F;log&#x2F;changelist.log中。</p>
<p>测试脚本是否能够达到实时备份的效果</p>
<p><img src="https://pic1.zhimg.com/80/v2-78a543052bbdb784b662b356b6994520_1440w.webp"></p>
<p>提示：在客户端运行脚本，在rsync服务端监控&#x2F;backup里的变化。然后在客户端操作在&#x2F;root&#x2F;test&#x2F;目录下进行文件的增加删除修改，看看是否能够及时的同步到rysnc服务器上</p>
<p><img src="https://pic4.zhimg.com/80/v2-ccc6f86dae60957ce110f001b4726c67_1440w.webp"></p>
<p>提示：可以看到我们在客户端新建一个文件是能够及时的同步到rysnc服务器上的</p>
<p><img src="https://pic2.zhimg.com/80/v2-7c7582c0b93559c599e284c1d9a53f05_1440w.webp"></p>
<p><img src="https://pic4.zhimg.com/80/v2-aae4be57999c5bafca6503c6af6812ef_1440w.webp"></p>
<p>提示：到此我们就实现了把客户端的指定目录下的资源通过inotify监控和rsync实时的把数据同步到rysnc服务器上。监控的事件我们可以在脚本里用inotifywait -e去指定即可；我们发现脚本运行，它是前端运行的，如果我们把CRT窗口关闭了，随之我们的监控也失效了，所以我们希望脚本后台运行</p>
<p>脚本以后台方式运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test-centos7-node1 ~]# bash inotify_rsync.sh &amp;</span><br><span class="line">[1] 1697</span><br><span class="line">[root@test-centos7-node1 ~]#</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-26a917607d805d4cc09c07795e85ad7f_1440w.webp"></p>
<p>提示：我们把脚本以后台方式执行也是可以正常的把客户端指定目录下的文件同步rsync服务器上，到此inotify+rsync实现实时数据同步就完成了。</p>
<h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><h5 id="1、参考脚本start-inotify-sh"><a href="#1、参考脚本start-inotify-sh" class="headerlink" title="1、参考脚本start-inotify.sh"></a>1、参考脚本start-inotify.sh</h5><ul>
<li>注意：需将DEST&#x3D;‘rsyncuser@<server_ip_1>::inotifywait’替换成实际的</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># premise: touch start-inotify.sh &amp;&amp; chmod +x start-inotify.sh</span></span><br><span class="line"><span class="comment"># implement: bash start-inotify.sh &lt;start|stop|status|logs|logs [num]&gt;</span></span><br><span class="line"></span><br><span class="line">server_name=<span class="string">&quot;inotifywait&quot;</span></span><br><span class="line">log_path=<span class="string">&quot;/var/log/changelist.log&quot;</span></span><br><span class="line">passwd_file=<span class="string">&quot;/etc/rsync_client.pass&quot;</span></span><br><span class="line">shell_name=<span class="string">&quot;start-inotify.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">	SRC=<span class="string">&#x27;/root/test-server/inotifywait/&#x27;</span></span><br><span class="line">	<span class="comment"># change &lt;server_ip_1&gt; to real ip</span></span><br><span class="line">	DEST=<span class="string">&#x27;rsyncuser@&lt;server_ip_1&gt;::inotifywait&#x27;</span></span><br><span class="line">	ps -ef |grep -v grep |grep <span class="variable">$server_name</span> &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$server_name</span> running&quot;</span> &amp;&amp; <span class="built_in">return</span> 1</span><br><span class="line">	inotifywait -mrq --timefmt <span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span> --format <span class="string">&#x27;%T %w %f&#x27;</span> -e create,delete,moved_to,close_write <span class="variable">$&#123;SRC&#125;</span> |<span class="keyword">while</span> <span class="built_in">read</span> DATE TIME DIR FILE;<span class="keyword">do</span></span><br><span class="line">        	FILEPATH=<span class="variable">$&#123;DIR&#125;</span><span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">        	rsync -az --delete --password-file=<span class="variable">$passwd_file</span> <span class="variable">$SRC</span> <span class="variable">$DEST</span> &amp;&amp;</span><br><span class="line">        	<span class="built_in">echo</span> <span class="string">&quot;At <span class="variable">$&#123;TIME&#125;</span> on <span class="variable">$&#123;DATE&#125;</span>, file <span class="variable">$FILEPATH</span> was backuped up via rsync&quot;</span> &gt;&gt; <span class="variable">$log_path</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">	ps -ef |grep -v grep |grep <span class="variable">$server_name</span> &amp;&gt;/dev/null &amp;&amp; ps -ef |grep -v grep |grep <span class="variable">$server_name</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> || <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$server_name</span> not running&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line">	ps -ef |grep -v grep |grep <span class="variable">$server_name</span> || <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$server_name</span> not running&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">logs</span></span>()&#123;</span><br><span class="line">	[[ ! <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]] &amp;&amp; <span class="built_in">tail</span> -n 20 <span class="variable">$log_path</span> || <span class="built_in">tail</span> -n <span class="variable">$1</span> <span class="variable">$log_path</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Usage=<span class="string">&quot;Usage: bash ./<span class="variable">$&#123;shell_name&#125;</span> &lt;start|stop|status|logs|logs [num]&gt;&quot;</span></span><br><span class="line">[[ ! <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="variable">$Usage</span> || <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">	start)</span><br><span class="line">	start 2&gt;&amp;1 &amp;;;</span><br><span class="line">	stop)</span><br><span class="line">	stop;;</span><br><span class="line">	status)</span><br><span class="line">	status;;</span><br><span class="line">	logs)</span><br><span class="line">	logs <span class="variable">$2</span>;;</span><br><span class="line">	*)</span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$Usage</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>



<ul>
<li>配置</li>
</ul>
<blockquote>
<p>yum -y install rsync inotify-tools</p>
<p>cat &#x2F;etc&#x2F;rsyncd.conf</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/rsyncd: configuration file for rsync daemon mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See rsyncd.conf man page for more options.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configuration example:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uid = nobody</span></span><br><span class="line"><span class="comment"># gid = nobody</span></span><br><span class="line"><span class="comment"># use chroot = yes</span></span><br><span class="line"><span class="comment"># max connections = 4</span></span><br><span class="line"><span class="comment"># pid file = /var/run/rsyncd.pid</span></span><br><span class="line"><span class="comment"># exclude = lost+found/</span></span><br><span class="line"><span class="comment"># transfer logging = yes</span></span><br><span class="line"><span class="comment"># timeout = 900</span></span><br><span class="line"><span class="comment"># ignore nonreadable = yes</span></span><br><span class="line"><span class="comment"># dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ftp]</span></span><br><span class="line"><span class="comment">#        path = /home/ftp</span></span><br><span class="line"><span class="comment">#        comment = ftp export area</span></span><br><span class="line"></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">use <span class="built_in">chroot</span> = no</span><br><span class="line">max connections = 0</span><br><span class="line">ignore errors</span><br><span class="line">exclude = lost+found/</span><br><span class="line"><span class="built_in">log</span> file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.lock</span><br><span class="line">reverse lookup = no</span><br><span class="line"><span class="comment">#hosts allow = 192.168.0.0/24</span></span><br><span class="line">[inotifywait]</span><br><span class="line">path = /root/test-server/inotifywait</span><br><span class="line">comment = backup</span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line">auth <span class="built_in">users</span> = rsyncuser</span><br><span class="line">secrets file = /etc/rsync.pass</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">rsync --daemon</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;rsyncuser:admin&#x27;</span> &gt; /etc/rsync.pass</span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/rsync.pass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;admin&quot;</span> &gt; /etc/rsync_client.pass</span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/rsync_client.pass</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>文件同步</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose之v1.x与v2.x说明</title>
    <url>/2023/07/29/docker-compose%E4%B9%8Bv1.x%E4%B8%8Ev2.x%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h3 id="题外：centos-7-修改本地语言（解决中文显示异常乱码）"><a href="#题外：centos-7-修改本地语言（解决中文显示异常乱码）" class="headerlink" title="题外：centos 7 修改本地语言（解决中文显示异常乱码）"></a>题外：centos 7 修改本地语言（解决中文显示异常乱码）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7没有这个文件 /etc/sysconfig/i18n</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">locale ：查看当前系统的语言类型</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lcoale -a ： 查看 当前系统所支持的所有语言类型！</span></span><br><span class="line">1、查看当前编码格式：</span><br><span class="line">root@localhost:~# locale</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LC_CTYPE=&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_NUMERIC=&quot;en_US.UTF-8&quot;</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">root@localhost:~# echo $LANG</span><br><span class="line">en_US.UTF-8</span><br><span class="line"></span><br><span class="line">2、临时修改：(只是临时的，当重新打开一个终端即失效！)</span><br><span class="line">root@localhost:~# LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">root@localhost:~# echo $LANG</span><br><span class="line">zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line">3、永久修改：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos 系统 ： /etc/locale.conf</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu 系统 ： /etc/locale.gen</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">题外：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看你的 /etc/profile.d/lang.sh 文件</span></span><br><span class="line"> 11   for langfile in /etc/locale.conf &quot;$HOME/.i18n&quot; ; do</span><br><span class="line"> 12         [ -f $langfile ] &amp;&amp; . $langfile &amp;&amp; sourced=1</span><br><span class="line"> 13     done</span><br><span class="line">：set nu</span><br><span class="line">看见没 ，上面有个路径 &quot;/etc/locale.conf&quot;  这个就是相当于 &quot;/etc/sysconfig/i18n&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 修改 /etc/locale.conf</span></span></span><br><span class="line">root@localhost:~# sed -ri &quot;s/LANG=en_US.UTF-8/LANG=zh_CN.UTF-8/&quot; /etc/locale.conf</span><br><span class="line">root@localhost:~# source /etc/locale.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 检查</span></span></span><br><span class="line">root@localhost:~# echo &quot;哈喽&quot;</span><br><span class="line">哈喽</span><br></pre></td></tr></table></figure>
<h3 id="一、docker-compose-v1-x"><a href="#一、docker-compose-v1-x" class="headerlink" title="一、docker-compose v1.x"></a>一、docker-compose v1.x</h3><h5 id="1、docker-compose1-x-是相对独立的命令，命令行方式如：docker-compose-–version"><a href="#1、docker-compose1-x-是相对独立的命令，命令行方式如：docker-compose-–version" class="headerlink" title="1、docker compose1.x 是相对独立的命令，命令行方式如：docker-compose –version"></a>1、docker compose1.x 是相对独立的命令，命令行方式如：docker-compose –version</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载docker-compose</span></span><br><span class="line">curl -kL https://github.com/docker/compose/releases/download/v1.25.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入执行权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加环境</span></span><br><span class="line">cat &gt;&gt; /etc/profile &lt; EOF</span><br><span class="line">export $PATH=$PATH:/usr/local/bin</span><br><span class="line">EOF</span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker-compose版本</span></span><br><span class="line">docker-compose -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">离线下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到github release中下载我们的docker-compose</span></span><br><span class="line">https://github.com/docker/compose/releases</span><br></pre></td></tr></table></figure>
<h3 id="二、docker-compose-v2-x"><a href="#二、docker-compose-v2-x" class="headerlink" title="二、docker-compose v2.x"></a>二、docker-compose v2.x</h3><h5 id="1、docker-compose-v2-被规划为Docker-CLI的一部分，命令行方式如docker-compose-version"><a href="#1、docker-compose-v2-被规划为Docker-CLI的一部分，命令行方式如docker-compose-version" class="headerlink" title="1、docker compose v2 被规划为Docker CLI的一部分，命令行方式如docker compose version"></a>1、docker compose v2 被规划为Docker CLI的一部分，命令行方式如docker compose version</h5><ul>
<li><strong>注意docker与compose之间是空格，不是中横线；version 作为一个命令存在，而不是参数</strong></li>
<li>在Mac和windows操作系统中，docker compose已经是docker CLI的一部分，也就是在安装docker的时候，就具备了执行docker compose的能力。</li>
<li>在linux版本下，需要我们来安装一下，安装过程其实是差不多的。<strong>注意的是必须安装到指定的目录下，才能被Docker CLI识别，以Docker CLI命令模式运行。</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">法一：命令是：docker-compose，安装类似v1.x</span><br><span class="line"></span><br><span class="line">法二：命令是：docker compose</span><br><span class="line">mkdir -p ~/.docker/cli-plugins</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载docker-compose</span></span><br><span class="line">curl -kL https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-`uname -s`-`uname -m` &gt; ~/.docker/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入执行权限</span></span><br><span class="line">chmod +x ~/.docker/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">docker compose version</span><br></pre></td></tr></table></figure>
<!-- <meta http-equiv="refresh" content="2"> --></li>
</ul>
]]></content>
      <categories>
        <category>docker compose</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s 1.26.2基于containerd1.6.18</title>
    <url>/2023/07/29/k8s%201.26.2%E5%9F%BA%E4%BA%8Econtainerd1.6.18/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>服务器参数：</p>
<ul>
<li>CentOS Linux release 7.9.2009 (Core)</li>
<li>4核（vCPU）8GB</li>
</ul>
<p>防火墙：关闭<br>SELINUX：SELINUX&#x3D;disabled<br>软件环境：</p>
<ul>
<li>docker版本：20.10.22</li>
<li>docker-compose版本：2.15.1</li>
<li>kubeadm版本：1.26.2；kubelet版本：1.26.2；kubectl版本：1.26.2</li>
<li>containerd版本：1.6.18</li>
<li>flannel版本：v0.20.0</li>
</ul>
<h3 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h3><h5 id="1、hostname"><a href="#1、hostname" class="headerlink" title="1、hostname"></a>1、hostname</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname tenxun-jing</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1 tenxun-jing</span><br></pre></td></tr></table></figure>
<h5 id="2、防火墙"><a href="#2、防火墙" class="headerlink" title="2、防火墙"></a>2、防火墙</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、<span class="comment">### 关闭</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; \</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld &amp;&amp; \</span><br><span class="line">setenforce 0 &amp;&amp; \</span><br><span class="line">sed -i <span class="string">&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">2、<span class="comment">## 检查</span></span><br><span class="line">getenforce &amp;&amp; \</span><br><span class="line"><span class="built_in">cat</span> /etc/selinux/config |grep <span class="string">&quot;^SELINUX=&quot;</span> &amp;&amp; \</span><br><span class="line">systemctl status firewalld |grep -B 1 <span class="string">&#x27;Active&#x27;</span></span><br><span class="line"></span><br><span class="line">3、<span class="comment"># 关闭swap</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">&#x27;/swap/s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line">4、<span class="comment"># 设置系统参数</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line">5、配置ipvs功能</span><br><span class="line">在Kubernetes中Service有两种带来模型，一种是基于iptables的，一种是基于ipvs的两者比较的话，</span><br><span class="line">ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.安装ipset和ipvsadm</span></span><br><span class="line">yum install ipset ipvsadm -y</span><br><span class="line"><span class="comment"># 2.添加需要加载的模块写入脚本文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 3.为脚本添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="comment"># 4.执行脚本文件</span></span><br><span class="line">/bin/bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="comment"># 5.查看对应的模块是否加载成功</span></span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">6、同步时间</span><br><span class="line">【可选】</span><br><span class="line">yum -y install ntpdate</span><br><span class="line"><span class="comment"># 先看下是否可以手动同步，如果提示ntpdate不存在则须安装，提示地址不通则需要打通或者更换内部NTP服务器</span></span><br><span class="line">ntpdate ntp.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置定时同步</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;*/15 * * * * ntpdate ntp.aliyun.com &gt; /dev/null 2&gt;&amp;1&#x27;</span> &gt;&gt; /var/spool/cron/root</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<h5 id="3、依赖安装"><a href="#3、依赖安装" class="headerlink" title="3、依赖安装"></a>3、依赖安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install update</span><br><span class="line">yum -y install lrzsz device-mapper-persistent-data lvm2 wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel python-devel epel-release openssh-server socat ipvsadm conntrack telnet nc</span><br></pre></td></tr></table></figure>
<h5 id="4、docker安装（可选）"><a href="#4、docker安装（可选）" class="headerlink" title="4、docker安装（可选）"></a>4、docker安装（可选）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 4: 更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
<h3 id="二、k8s安装"><a href="#二、k8s安装" class="headerlink" title="二、k8s安装"></a>二、k8s安装</h3><h5 id="1、安装kubeadm、kubelet、kubectl"><a href="#1、安装kubeadm、kubelet、kubectl" class="headerlink" title="1、安装kubeadm、kubelet、kubectl"></a>1、安装kubeadm、kubelet、kubectl</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br><span class="line">yum install -y kubelet-1.26.2 kubeadm-1.26.2 kubectl-1.26.2</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line">systemctl is-active kubelet</span><br></pre></td></tr></table></figure>
<h5 id="2、安装containerd，配置-crictl"><a href="#2、安装containerd，配置-crictl" class="headerlink" title="2、安装containerd，配置 crictl"></a>2、安装containerd，配置 crictl</h5><h6 id="2-1、安装containerd"><a href="#2-1、安装containerd" class="headerlink" title="2.1、安装containerd"></a>2.1、安装containerd</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装</span><br><span class="line"><span class="comment"># 源已经添加过可省略</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum list available |grep containerd</span><br><span class="line">yum install -y containerd.io-1.6.18</span><br><span class="line"></span><br><span class="line">2、生成配置文件</span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line">3、修改配置文件</span><br><span class="line"><span class="comment"># 修改 cgroups 为 systemd</span></span><br><span class="line">sed -i <span class="string">&#x27;s#SystemdCgroup = false#SystemdCgroup = true#&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 pause 镜像地址:sandbox_image=</span></span><br><span class="line"><span class="comment"># containerd.io-1.6.18对应：registry.k8s.io</span></span><br><span class="line"><span class="comment"># containerd.io-1.6.6对应：k8s.gcr.io</span></span><br><span class="line">sed -i <span class="string">&#x27;s#registry.k8s.io#registry.aliyuncs.com/google_containers#&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改版本号：</span></span><br><span class="line"><span class="comment"># 可以先确定pasuse的版本号，containerd默认是3.6；kubeadm需要3.9</span></span><br><span class="line">sed -i <span class="string">&#x27;s#pause:3.6#pause:3.9#&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改容器存储路径到空间比较充裕的路径</span></span><br><span class="line">默认：root = <span class="string">&quot;/var/lib/containerd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## 补充【systemd驱动】开始 ##################</span></span><br><span class="line"></span><br><span class="line">4、查看k8s驱动</span><br><span class="line"><span class="comment"># k8s 1.26.2默认是systemd驱动</span></span><br><span class="line"><span class="comment"># 查看所有配置项列表，找到kubelet-config</span></span><br><span class="line">kubectl get cm -n kube-system</span><br><span class="line"><span class="comment"># 查看cgroupDriver的值；cgroupDriver: systemd</span></span><br><span class="line">kubectl edit cm kubelet-config -n kube-system</span><br><span class="line"></span><br><span class="line">5、查看kubelet默认驱动</span><br><span class="line"><span class="comment"># 查看kubelet 的配置文件</span></span><br><span class="line"><span class="comment"># yum安装kubelet 1.26.2默认是/var/lib/kubelet/config.yaml</span></span><br><span class="line">systemctl status kubelet.service |grep <span class="string">&#x27;config&#x27;</span></span><br><span class="line"><span class="comment"># 查看配置项；默认是：systemd</span></span><br><span class="line"><span class="built_in">cat</span> /var/lib/kubelet/config.yaml|grep <span class="string">&quot;cgroupDriver&quot;</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">cgroupDriver: systemd</span><br><span class="line"></span><br><span class="line">6、kubeadm init 时可指定驱动</span><br><span class="line"><span class="comment"># 打印初始化时配置，可查看cgroupDriver默认值</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --component-configs KubeletConfiguration</span><br><span class="line"><span class="comment"># 默认是systemd；修改的话，需生成配置kubeadm.yml，在配置文件中的kind: KubeletConfiguration添加</span></span><br><span class="line">cgroupDriver: systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：在kubeadm.yml最后添加以下内容</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd</span><br><span class="line"></span><br><span class="line"><span class="comment">### 注意以上驱动配置需一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################## 补充【systemd驱动】结束 ##################</span></span><br></pre></td></tr></table></figure>
<p><strong>containerd 配置镜像加速</strong></p>
<ul>
<li><p><strong>法一：添加附件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、修改/etc/containerd/config.toml文件</span><br><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span><br><span class="line">      config_path = &quot;/etc/containerd/certs.d&quot;  # 镜像地址配置文件</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.auths]</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.headers]</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span><br><span class="line"></span><br><span class="line">2、创建相应目录</span><br><span class="line">mkdir /etc/containerd/certs.d/docker.io -pv</span><br><span class="line"></span><br><span class="line">3、配置加速</span><br><span class="line">cat &gt; /etc/containerd/certs.d/docker.io/hosts.toml &lt;&lt; EOF</span><br><span class="line">server = &quot;https://docker.io&quot;</span><br><span class="line">[host.&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">4、重启Containerd</span><br><span class="line">systemctl restart containerd</span><br><span class="line"></span><br><span class="line">5、拉取镜像</span><br><span class="line">ctr i pull docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>法二：直接在</strong>&#x2F;etc&#x2F;containerd&#x2F;config.toml中<strong>添加</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、修改/etc/containerd/config.toml文件</span><br><span class="line">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span><br><span class="line"></span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.auths]</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.headers]</span><br><span class="line"> </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span><br><span class="line">        # 添加镜像加速信息（此注释去掉）</span><br><span class="line">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class="line">          endpoint = [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;]</span><br><span class="line"></span><br><span class="line">2、重启Containerd</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure>
<p><strong>containerd代理配置参考：</strong></p>
</li>
<li><p>前提得有代理，没有代理，大可不必</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、添加代理</span><br><span class="line">vim /lib/systemd/system/containerd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 [Service] 下添加</span></span><br><span class="line">Environment=<span class="string">&quot;http_proxy=http://127.0.0.1:7890&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;https_proxy=http://127.0.0.1:7890&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;ALL_PROXY=socks5://127.0.0.1:7891&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;all_proxy=socks5://127.0.0.1:7891&quot;</span></span><br><span class="line"></span><br><span class="line">2、重启</span><br><span class="line">systemctl daemon-reload &amp;&amp; \</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="2-2、配置crictl"><a href="#2-2、配置crictl" class="headerlink" title="2.2、配置crictl"></a>2.2、配置crictl</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件地址 /etc/crictl.yaml，修改 sock 地址</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF&gt; /etc/crictl.yaml </span></span><br><span class="line"><span class="string">runtime-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">image-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">timeout: 10</span></span><br><span class="line"><span class="string">debug: false</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h6 id="2-3、启动服务"><a href="#2-3、启动服务" class="headerlink" title="2.3、启动服务"></a>2.3、启动服务</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> containerd &amp;&amp; \</span><br><span class="line">systemctl daemon-reload &amp;&amp; \</span><br><span class="line">systemctl restart containerd</span><br><span class="line"></span><br><span class="line">systemctl status containerd</span><br></pre></td></tr></table></figure>
<h5 id="3、安装k8s"><a href="#3、安装k8s" class="headerlink" title="3、安装k8s"></a>3、安装k8s</h5><p><strong>命令行形式初始化</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、官方镜像</span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.4.12 \</span><br><span class="line">--image-repository registry.k8s.io \</span><br><span class="line">--kubernetes-version v1.26.2 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket /var/run/containerd/containerd.sock \</span><br><span class="line">--ignore-preflight-errors=all</span><br><span class="line"></span><br><span class="line">2、阿里云镜像</span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.4.12 \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.26.2 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket /var/run/containerd/containerd.sock \</span><br><span class="line">--ignore-preflight-errors=all</span><br></pre></td></tr></table></figure>
<h6 id="3-1、生成kubeadm-yml"><a href="#3-1、生成kubeadm-yml" class="headerlink" title="3.1、生成kubeadm.yml"></a>3.1、生成kubeadm.yml</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm.yml</span><br><span class="line"></span><br><span class="line">vim kubeadm.yml</span><br><span class="line">修改如下配置：</span><br><span class="line"></span><br><span class="line">修改本机主机名、本机ip、pod的ip、service的ip、k8s版本号、镜像源</span><br><span class="line">nodeRegistration:</span><br><span class="line">criSocket: unix:///var/run/containerd/containerd.sock</span><br><span class="line">imagePullPolicy: IfNotPresent</span><br><span class="line">name: tenxun-jing</span><br><span class="line">taints: null</span><br><span class="line">....</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">advertiseAddress: 172.22.109.126</span><br><span class="line">bindPort: 6443</span><br><span class="line">....</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: 1.26.2</span><br><span class="line">networking:</span><br><span class="line">dnsDomain: cluster.local</span><br><span class="line">podSubnet: 10.244.0.0/16</span><br><span class="line">serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure>
<p><strong>修改后的配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- <span class="built_in">groups</span>:</span><br><span class="line">- system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">token: abcdef.0123456789abcdef</span><br><span class="line">ttl: 24h0m0s</span><br><span class="line">usages:</span><br><span class="line">- signing</span><br><span class="line">- authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">advertiseAddress: 192.168.0.99</span><br><span class="line">bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">criSocket: unix:///var/run/containerd/containerd.sock</span><br><span class="line">imagePullPolicy: IfNotPresent</span><br><span class="line">name: tenxun-jing</span><br><span class="line">taints: null</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: &#123;&#125;</span><br><span class="line">etcd:</span><br><span class="line"><span class="built_in">local</span>:</span><br><span class="line">dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: registry.k8s.io</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: 1.26.2</span><br><span class="line">networking:</span><br><span class="line">dnsDomain: cluster.local</span><br><span class="line">podSubnet: 10.244.0.0/16</span><br><span class="line">serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>
<h6 id="3-2、使用-kubeadm-yml-进行初始化"><a href="#3-2、使用-kubeadm-yml-进行初始化" class="headerlink" title="3.2、使用 kubeadm.yml 进行初始化"></a>3.2、使用 kubeadm.yml 进行初始化</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所需镜像列表</span></span><br><span class="line">kubeadm config images list --config ./kubeadm.yml</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kubeadm config images pull --config ./kubeadm.yml</span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">kubeadm init phase preflight --config=./kubeadm.yml</span><br><span class="line"><span class="comment"># 根据配置文件启动 kubeadm 初始化 k8s</span></span><br><span class="line">kubeadm init --config=./kubeadm.yml --upload-certs --v=6</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">export KUBECONFIG=/etc/kubernetes/admin.conf</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h6 id="3-3、kubectl补全"><a href="#3-3、kubectl补全" class="headerlink" title="3.3、kubectl补全"></a>3.3、kubectl补全</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、安装bash-completion工具</span><br><span class="line">yum install bash-completion -y</span><br><span class="line">否则报错：</span><br><span class="line">-bash: _get_comp_words_by_ref: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">2、执行bash_completion</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line"></span><br><span class="line">3、加载kubectl completion</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash) </span><br><span class="line"><span class="comment"># 在 bash 中设置当前 shell 的自动补全，要先安装 bash-completion 包。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc </span><br><span class="line"><span class="comment"># 在您的 bash shell 中永久的添加自动补全</span></span><br></pre></td></tr></table></figure>
<h5 id="4、安装网络插件-flannel"><a href="#4、安装网络插件-flannel" class="headerlink" title="4、安装网络插件 flannel"></a>4、安装网络插件 flannel</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、下载</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">2、操作</span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line"><span class="comment"># 注意：新版本的kube-flannel.yaml默认使用的docker.io镜像源</span></span><br><span class="line"></span><br><span class="line">- name: install-cni-plugin</span><br><span class="line"><span class="comment">#image: flannelcni/flannel-cni-plugin:v1.1.0 for ppc64le and mips64le (dockerhub limitations may apply)</span></span><br><span class="line">image: docker.io/rancher/mirrored-flannelcni-flannel-cni-plugin:v1.1.0</span><br><span class="line"><span class="built_in">command</span>:</span><br><span class="line">- <span class="built_in">cp</span></span><br><span class="line">args:</span><br><span class="line">- -f</span><br><span class="line">- /flannel</span><br><span class="line">- /opt/cni/bin/flannel</span><br><span class="line">volumeMounts:</span><br><span class="line">- name: cni-plugin</span><br><span class="line">mountPath: /opt/cni/bin</span><br><span class="line">- name: install-cni</span><br><span class="line"><span class="comment">#image: flannelcni/flannel:v0.20.0 for ppc64le and mips64le (dockerhub limitations may apply)</span></span><br><span class="line">image: docker.io/rancher/mirrored-flannelcni-flannel:v0.20.0</span><br><span class="line"></span><br><span class="line">3、确保与kueadm初始化时设置的podSubnet网段一致</span><br><span class="line"><span class="comment"># 查看：kubectl get configmap kubeadm-config -n kube-system -o yaml |grep podSubnet</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">      podSubnet: 10.244.0.0/16</span><br><span class="line"><span class="comment"># 查看kube-flannel.yml</span></span><br><span class="line">grep -A 3 <span class="string">&quot;net-conf.json&quot;</span> kube-flannel.yml|grep <span class="string">&quot;Network&quot;</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line"></span><br><span class="line">4、修改模式host-gw（默认是vxlan --》1450）</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;host-gw&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、启动</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure>
<h5 id="5、添加节点"><a href="#5、添加节点" class="headerlink" title="5、添加节点"></a>5、添加节点</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、获取加入集群的命令，以下 指令在master节点执行</span><br><span class="line"><span class="comment">#token会过期,有效期为5分钟，以下指令在master节点执行</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line">2、添加</span><br><span class="line">kubeadm <span class="built_in">join</span> 172.16.8.31:6443 --token whihg6.utknhvj4dg3ndsv1     --discovery-token-ca-cert-hash sha256:5d2939c6d23cde6507e621cf21d550a7e083efd4331a245c2250209bdb110b89</span><br><span class="line"></span><br><span class="line">3、检查</span><br><span class="line">查看节点是否加入成功（master节点执行）</span><br><span class="line">kubectl get pod -nsit -owide</span><br></pre></td></tr></table></figure>
<h3 id="三、问题记录"><a href="#三、问题记录" class="headerlink" title="三、问题记录"></a>三、问题记录</h3><h5 id="1、解决k8s-Error-registering-network-failed-to-acquire-lease-node-“master“-pod-cidr-not-assigne"><a href="#1、解决k8s-Error-registering-network-failed-to-acquire-lease-node-“master“-pod-cidr-not-assigne" class="headerlink" title="1、解决k8s Error registering network: failed to acquire lease: node “master“ pod cidr not assigne"></a>1、解决k8s Error registering network: failed to acquire lease: node “master“ pod cidr not assigne</h5><p>问题描述：<br>部署flannel网络插件时发现flannel一直处于CrashLoopBackOff状态，查看日志提示没有分配cidr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、修改</span><br><span class="line">vim /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class="line">增加参数：</span><br><span class="line">--allocate-node-cidrs=<span class="literal">true</span></span><br><span class="line">--cluster-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line">2、重启</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<h5 id="2、container-runtime-network-not-ready-NetworkReady-false-reason-NetworkPluginNotReady-message-Network-plugin-returns-error-cni-plugin-not-initialized"><a href="#2、container-runtime-network-not-ready-NetworkReady-false-reason-NetworkPluginNotReady-message-Network-plugin-returns-error-cni-plugin-not-initialized" class="headerlink" title="2、container runtime network not ready: NetworkReady&#x3D;false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized"></a>2、container runtime network not ready: NetworkReady&#x3D;false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、问题触发：</span><br><span class="line">重装时，重新加入从节点，网络正常，kube-proxy和fannel均正常，describe查看从节点构建过程，</span><br><span class="line">发现：container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized</span><br><span class="line"></span><br><span class="line">2、解决：重启从节点的容器：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看kubelet状态：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status kubelet</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">journalctl -f -u kubelet</span></span><br><span class="line">systemctl restart containerd.service</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/j1447443432/picture/raw/master/60pictures/1679625677313-b801920f-d786-4c2a-81c9-004fbf517f5b.png" alt="75bf000a2ccee5441da25d0ed49bc8cf_dd38f44b469a4a80af941a63dfbc8020.png"></p>
<h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><h5 id="1、污点taint"><a href="#1、污点taint" class="headerlink" title="1、污点taint"></a>1、污点taint</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、查看</span><br><span class="line">kubectl describe nodes k8s-master |grep Taints</span><br><span class="line"></span><br><span class="line">2、删除</span><br><span class="line">kubectl taint node k8s-master gameble-</span><br><span class="line">kubectl taint node k8s-master node-role.kubernetes.io/control-plane:NoSchedule-</span><br><span class="line"><span class="comment"># 一键删除</span></span><br><span class="line">kubectl taint node tenxun-jing $(kubectl describe node tenxun-jing |grep Taints|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)-</span><br><span class="line"></span><br><span class="line">3、添加</span><br><span class="line">kubectl taint node k8s-master gameble</span><br></pre></td></tr></table></figure>
<h5 id="2、重置脚本"><a href="#2、重置脚本" class="headerlink" title="2、重置脚本"></a>2、重置脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="comment"># premise: touch k8s_reset_init.sh &amp;&amp; chmod +x k8s_reset_init.sh</span></span><br><span class="line"><span class="comment"># implement: bash k8s_reset_init.sh &amp;&amp; [init1|init2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">init1</span></span>()&#123;</span><br><span class="line">kubeadm reset -f &amp;&amp; \</span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.4.12 \</span><br><span class="line">--image-repository registry.k8s.io \</span><br><span class="line">--kubernetes-version v1.26.2 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--cri-socket /var/run/containerd/containerd.sock \</span><br><span class="line">--ignore-preflight-errors=all</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">init2</span></span>()&#123;</span><br><span class="line">kubeadm reset -f &amp;&amp; \</span><br><span class="line">kubeadm init --config=./kubeadm.yml --upload-certs --v=6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3、代理脚本"><a href="#3、代理脚本" class="headerlink" title="3、代理脚本"></a>3、代理脚本</h5><ul>
<li>前提得有代理，没有代理，大可不必<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># premise: touch start_containerd_env.sh &amp;&amp; chmod +x start_containerd_env.sh</span></span><br><span class="line"><span class="comment"># implement: source start_containerd_env.sh &amp;&amp; [env_start|env_stop|env_status]</span></span><br><span class="line"></span><br><span class="line">containerd_file=<span class="string">&quot;/lib/systemd/system/containerd.service&quot;</span></span><br><span class="line">proxy_port=<span class="string">&quot;7890&quot;</span></span><br><span class="line">socks5_port=<span class="string">&quot;7891&quot;</span></span><br><span class="line">proxy_ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list</span></span><br><span class="line">proxy_str_list=(</span><br><span class="line">                <span class="string">&#x27;Environment=&quot;http_proxy=http:\/\/&#x27;</span><span class="variable">$&#123;proxy_ip&#125;</span><span class="string">&#x27;:&#x27;</span><span class="variable">$&#123;proxy_port&#125;</span><span class="string">&#x27;&quot;&#x27;</span> \</span><br><span class="line">                <span class="string">&#x27;Environment=&quot;https_proxy=http:\/\/&#x27;</span><span class="variable">$&#123;proxy_ip&#125;</span><span class="string">&#x27;:&#x27;</span><span class="variable">$&#123;proxy_port&#125;</span><span class="string">&#x27;&quot;&#x27;</span> \</span><br><span class="line">                <span class="string">&#x27;Environment=&quot;ALL_PROXY=socks5:\/\/&#x27;</span><span class="variable">$&#123;proxy_ip&#125;</span><span class="string">&#x27;:&#x27;</span><span class="variable">$&#123;socks5_port&#125;</span><span class="string">&#x27;&quot;&#x27;</span> \</span><br><span class="line">                <span class="string">&#x27;Environment=&quot;all_proxy=socks5:\/\/&#x27;</span><span class="variable">$&#123;proxy_ip&#125;</span><span class="string">&#x27;:&#x27;</span><span class="variable">$&#123;socks5_port&#125;</span><span class="string">&#x27;&quot;&#x27;</span> \</span><br><span class="line">        )</span><br><span class="line">list_len=$((<span class="variable">$&#123;#proxy_str_list[@]&#125;</span> - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">env_create</span></span>()&#123;</span><br><span class="line">	[[ ! -f <span class="variable">$&#123;containerd_file&#125;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] <span class="variable">$&#123;containerd_file&#125;</span> not exist&quot;</span> &amp;&amp; <span class="built_in">return</span></span><br><span class="line">	<span class="keyword">for</span> ((i=<span class="number">0</span>;i &lt;= <span class="variable">$&#123;list_len&#125;</span>;i++));<span class="keyword">do</span></span><br><span class="line">		grep -on <span class="string">&quot;^<span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span> &amp;&gt;/dev/null</span><br><span class="line">		[[ $? != <span class="string">&quot;0&quot;</span> ]] &amp;&amp; sed -ri <span class="string">&quot;/<span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>/d&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span> &amp;&amp; sed -ri <span class="string">&quot;/\[Service\]/a<span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">	proxy_str_num=$(grep -o <span class="string">&quot;http://<span class="variable">$&#123;proxy_ip&#125;</span>:<span class="variable">$&#123;proxy_port&#125;</span>\|socks5://<span class="variable">$&#123;proxy_ip&#125;</span>:<span class="variable">$&#123;socks5_port&#125;</span>&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span>|<span class="built_in">wc</span> -l)</span><br><span class="line">	[[ <span class="string">&quot;<span class="variable">$&#123;proxy_str_num&#125;</span>&quot;</span> != <span class="string">&quot;<span class="variable">$&#123;#proxy_str_list[@]&#125;</span>&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] not create containerd proxy in <span class="variable">$&#123;containerd_file&#125;</span>&quot;</span> &amp;&amp; <span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">env_delete</span></span>()&#123;</span><br><span class="line">	[[ ! -f <span class="variable">$&#123;containerd_file&#125;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] <span class="variable">$&#123;containerd_file&#125;</span> not exist&quot;</span> &amp;&amp; <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">for</span> ((i=<span class="number">0</span>;i &lt;= <span class="variable">$&#123;list_len&#125;</span>;i++));<span class="keyword">do</span></span><br><span class="line">		grep -on <span class="string">&quot;^<span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span> &amp;&gt;/dev/null &amp;&amp; sed -ri <span class="string">&quot;s/(^<span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>)/#\1/g&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span></span><br><span class="line">		grep -on <span class="string">&quot;^<span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span> &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] not notes <span class="variable">$&#123;proxy_str_list[<span class="variable">$&#123;i&#125;</span>]&#125;</span>&quot;</span> &amp;&amp; <span class="built_in">return</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">env_start</span></span>()&#123;</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;==[env_start]== BEGIN&quot;</span></span><br><span class="line"></span><br><span class="line">	env_create</span><br><span class="line">	systemctl daemon-reload &amp;&amp; systemctl restart containerd</span><br><span class="line">	[[ <span class="string">&quot;<span class="subst">$(systemctl is-active containerd)</span>&quot;</span> != <span class="string">&quot;active&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] containerd restart error&quot;</span> &amp;&amp; <span class="built_in">return</span></span><br><span class="line">	[[ $(systemctl show --property=Environment containerd|grep -o <span class="string">&quot;<span class="variable">$&#123;proxy_ip&#125;</span>&quot;</span>|<span class="built_in">wc</span> -l) == <span class="string">&quot;4&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[sucess] start containerd proxy&quot;</span> &amp;&amp; systemctl show --property=Environment containerd |grep -o <span class="string">&quot;http://<span class="variable">$&#123;proxy_ip&#125;</span>:<span class="variable">$&#123;proxy_port&#125;</span>\|socks5://<span class="variable">$&#123;proxy_ip&#125;</span>:<span class="variable">$&#123;socks5_port&#125;</span>&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;[error] not set containerd proxy env&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;==[env_start]== END&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">env_stop</span></span>()&#123;</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;==[env_stop]== BEGIN&quot;</span></span><br><span class="line">	</span><br><span class="line">	grep <span class="string">&quot;^Environment=&quot;</span> <span class="variable">$&#123;containerd_file&#125;</span>|grep <span class="string">&quot;<span class="variable">$&#123;proxy_ip&#125;</span>&quot;</span> &amp;&gt;/dev/null</span><br><span class="line">	<span class="keyword">if</span> [[ $? == <span class="string">&quot;0&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">		env_delete</span><br><span class="line">		systemctl daemon-reload &amp;&amp; systemctl restart containerd</span><br><span class="line">		[[ <span class="string">&quot;<span class="subst">$(systemctl is-active containerd)</span>&quot;</span> != <span class="string">&quot;active&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] containerd restart error&quot;</span> &amp;&amp; <span class="built_in">return</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;[warning] not operation, not set containerd proxy&quot;</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	systemctl show --property=Environment containerd | grep <span class="string">&quot;Environment=&quot;</span></span><br><span class="line">	[[ $(systemctl show --property=Environment containerd|grep -o <span class="string">&quot;<span class="variable">$&#123;proxy_ip&#125;</span>&quot;</span>|<span class="built_in">wc</span> -l) != <span class="string">&quot;4&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[sucess] stop containerd proxy&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;==[env_stop]== END&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">env_status</span></span>()&#123;</span><br><span class="line">	systemctl show --property=Environment containerd | grep -o <span class="string">&quot;http://<span class="variable">$&#123;proxy_ip&#125;</span>:<span class="variable">$&#123;proxy_port&#125;</span>\|socks5://<span class="variable">$&#123;proxy_ip&#125;</span>:<span class="variable">$&#123;socks5_port&#125;</span>&quot;</span></span><br><span class="line">	[[ <span class="string">&quot;<span class="subst">$(systemctl show --property=Environment containerd|grep -o <span class="string">&quot;<span class="variable">$&#123;proxy_ip&#125;</span>&quot;</span>|wc -l)</span>&quot;</span> != <span class="string">&quot;4&quot;</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[error] not set containerd proxy env&quot;</span>	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg=<span class="string">&quot;==[error]==input error, please try: source xx.sh &amp;&amp; [env_start|env_stop|env_status]&quot;</span></span><br><span class="line">[[ ! <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]] || <span class="built_in">echo</span> <span class="variable">$&#123;msg&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4、更改nodePort模式下的默认端口范围"><a href="#4、更改nodePort模式下的默认端口范围" class="headerlink" title="4、更改nodePort模式下的默认端口范围"></a>4、更改nodePort模式下的默认端口范围</h5><ul>
<li>官网：<a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/">https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/</a></li>
<li>使用nodePort模式，官方默认范围为30000-32767</li>
<li>NodePort 类型<br>如果将 type 字段设置为 NodePort，则 Kubernetes 控制平面将在 –service-node-port-range 标志指定的范围内分配端口（默认值：30000-32767）。 每个节点将那个端口（每个节点上的相同端口号）代理到您的服务中。 您的服务在其 .spec.ports[*].nodePort 字段中要求分配的端口。</li>
<li>修改&#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node-1 manifests]# vim /etc/kubernetes/manifests/kube-apiserver.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    component: kube-apiserver</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: kube-apiserver</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-apiserver</span><br><span class="line">    - --advertise-address=192.168.235.21</span><br><span class="line">    - --allow-privileged=true</span><br><span class="line">    - --authorization-mode=Node,RBAC</span><br><span class="line">    - --client-ca-file=/etc/kubernetes/pki/ca.crt</span><br><span class="line">    - --enable-admission-plugins=NodeRestriction</span><br><span class="line">    - --enable-admission-plugins=PodPreset             </span><br><span class="line">    - --runtime-config=settings.k8s.io/v1alpha1=true   </span><br><span class="line">    - --service-node-port-range=1-65535                # 需增加的配置</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
调整完毕后会等待大概10s，因为更改kube-apiserver.yaml配置文件后会进行重启操作，重新加载配置文件，期间可执行kubectl get pod命令进行查看，如果可正常查看pod信息即说明重启完毕。但是此时端口范围可能仍然不会生效，需要继续进行以下操作：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node-0 manifests]# systemctl daemon-reload</span><br><span class="line">[root@node-0 manifests]# systemctl restart kubelet</span><br></pre></td></tr></table></figure>
然后重新进行新的service的生成，即可成功创建指定nodePort的service。</li>
</ul>
<h5 id="5、补充：云服务器公网部署初始化-实验表明：不同节点之间的pod无法互通。-不建议"><a href="#5、补充：云服务器公网部署初始化-实验表明：不同节点之间的pod无法互通。-不建议" class="headerlink" title="5、补充：云服务器公网部署初始化(实验表明：不同节点之间的pod无法互通。**不建议)"></a>5、补充：云服务器公网部署初始化(实验表明：不同节点之间的pod无法互通。**不建议)</h5><ul>
<li>法一：添加公网ip的虚拟网卡<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、临时生效</span><br><span class="line">ifconfig eth0:1 &lt;公网ip&gt;</span><br><span class="line"></span><br><span class="line">2、永久生效</span><br><span class="line">cat &gt; /etc/sysconfig/network-scripts/ifcfg-eth0:1 &lt;&lt;EOF</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEVICE=eth0:1</span><br><span class="line">IPADDR=&lt;公网ip&gt;</span><br><span class="line">PREFIX=32</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">USERCTL=no</span><br><span class="line">ONBOOT=yes</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">3、kubeadm初始化时选择 &lt;公网ip&gt;</span><br><span class="line"></span><br><span class="line">4、补充：卸载网卡</span><br><span class="line">ifconfig eth0:1 down</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、公网ip初始化</span><br><span class="line"></span><br><span class="line">2、修改/etc/kubernetes/manifests/etcd.yaml</span><br><span class="line">    - --listen-client-urls=https://127.0.0.1:2379,https://101.34.112.190:2379</span><br><span class="line">    - --listen-peer-urls=https://101.34.112.190:2380</span><br><span class="line">改为</span><br><span class="line">    - --listen-client-urls=https://127.0.0.1:2379</span><br><span class="line">    - --listen-peer-urls=https://127.0.0.1:2380</span><br><span class="line"></span><br><span class="line">3、手工停止已启动的进程</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先停止kubelet</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl stop kubelet</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把所有kube的进程杀掉</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -anp |grep kube</span></span><br><span class="line">请注意，不要执行 kubeadm reset，先 systemctl stop kubelet ，然后手动通过 netstat -anp |grep kube 来找pid，</span><br><span class="line">再通过 kill -9 pid 强杀。否则又会生成错误的etcd配置文件，这里非常关键！！！</span><br><span class="line"></span><br><span class="line">4、重新初始化，但是跳过etcd文件已经存在的检查</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动kubelet</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl start kubelet</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新初始化，跳过配置文件生成环节，不要etcd的修改要被覆盖掉</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm init --config=kubeadm-config.yaml --skip-phases=preflight,certs,kubeconfig,kubelet-start,control-plane,etcd</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="6、验证集群是否搭建成功："><a href="#6、验证集群是否搭建成功：" class="headerlink" title="6、验证集群是否搭建成功："></a>6、验证集群是否搭建成功：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; test.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: test</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: test</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: test</span><br><span class="line">      annotations:</span><br><span class="line">        md-update: &#x27;20200517104741&#x27;</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: test</span><br><span class="line">        image: centos:7.9.2009</span><br><span class="line">        command:</span><br><span class="line">        - sh</span><br><span class="line">        - -c</span><br><span class="line">        - |</span><br><span class="line">          echo $(hostname) &gt; hostname.txt</span><br><span class="line">          python -m SimpleHTTPServer</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 512Mi</span><br><span class="line">            cpu: 1</span><br><span class="line">          requests:</span><br><span class="line">            memory: 64Mi</span><br><span class="line">            cpu: 0.01</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tz-config</span><br><span class="line">          mountPath: /etc/localtime</span><br><span class="line">      volumes:</span><br><span class="line">      - name: tz-config</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /usr/share/zoneinfo/Etc/GMT-8</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: test</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: test</span><br><span class="line">  ports:</span><br><span class="line">  - name: external-test</span><br><span class="line">    port: 8000</span><br><span class="line">    targetPort: 8000</span><br><span class="line">    nodePort: 30001</span><br><span class="line">  type: NodePort</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl apply -f test.yaml</span><br></pre></td></tr></table></figure>
<h5 id="7、拉取镜像脚本（测试通过）"><a href="#7、拉取镜像脚本（测试通过）" class="headerlink" title="7、拉取镜像脚本（测试通过）"></a>7、拉取镜像脚本（测试通过）</h5><ul>
<li>本脚本针对coredns插件镜像拉取；建议是拉取k8s 1.11版本以上得（k8s 从1.11版本开始使用coredns插件）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Author:jing</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">premise: <span class="built_in">touch</span> k8s_img_pull.sh &amp;&amp; <span class="built_in">chmod</span> +x k8s_img_pull.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">implement: bash k8s_img_pull.sh</span></span><br><span class="line"></span><br><span class="line">china_img_url=&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span><br><span class="line">k8s_img_url=&quot;k8s.gcr.io&quot;</span><br><span class="line">version=&quot;v1.26.2&quot;</span><br><span class="line">images=($(kubeadm config images list --kubernetes-version=$&#123;version&#125; | awk -F &quot;/&quot; &#x27;&#123;if ($3 != &quot;&quot;) &#123;print $2&quot;/&quot;$3&#125;else&#123;print $2&#125;&#125;&#x27;))</span><br><span class="line"></span><br><span class="line">for imagename in $&#123;images[@]&#125;</span><br><span class="line">do</span><br><span class="line">        echo $&#123;imagename&#125;|grep &quot;/&quot; &amp;&gt; /dev/null</span><br><span class="line">        if [[ $? == 0 ]];then</span><br><span class="line">            coredns_img=$(echo $&#123;imagename&#125;|grep &quot;/&quot;|awk -F&#x27;/&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">            ctr -n k8s.io images pull $&#123;china_img_url&#125;/$&#123;coredns_img&#125;</span><br><span class="line">            ctr -n k8s.io images tag $&#123;china_img_url&#125;/$&#123;coredns_img&#125; $&#123;k8s_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">            ctr -n k8s.io images rm $&#123;china_img_url&#125;/$&#123;coredns_img&#125;</span><br><span class="line">        else</span><br><span class="line">            ctr -n k8s.io images pull $&#123;china_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">            ctr -n k8s.io images tag $&#123;china_img_url&#125;/$&#123;imagename&#125; $&#123;k8s_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">            ctr -n k8s.io images rm $&#123;china_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">        fi</span><br><span class="line">        </span><br><span class="line">        # 导出</span><br><span class="line">        # [[ ! -d &quot;/root/kube-images/&quot; ]] &amp;&amp; mkdir -p /root/kube-images/</span><br><span class="line">        # ctr -n k8s.io images save -o /root/kube-images/$&#123;imagename&#125;.tar.gz $&#123;k8s_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">        # ctr -n k8s.io images rm $&#123;k8s_img_url&#125;/$imagename&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<strong>docker版</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Author:jing</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">premise: <span class="built_in">touch</span> k8s_img_pull.sh &amp;&amp; <span class="built_in">chmod</span> +x k8s_img_pull.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">implement: bash k8s_img_pull.sh</span></span><br><span class="line"></span><br><span class="line">china_img_url=&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span><br><span class="line">k8s_img_url=&quot;k8s.gcr.io&quot;</span><br><span class="line">version=&quot;v1.18.20&quot;</span><br><span class="line">images=($(kubeadm config images list --kubernetes-version=$&#123;version&#125; | awk -F &quot;/&quot; &#x27;&#123;if ($3 != &quot;&quot;) &#123;print $2&quot;/&quot;$3&#125;else&#123;print $2&#125;&#125;&#x27;))</span><br><span class="line"></span><br><span class="line">for imagename in $&#123;images[@]&#125;</span><br><span class="line">do</span><br><span class="line">        echo $&#123;imagename&#125;|grep &quot;/&quot; &amp;&gt; /dev/null</span><br><span class="line">        if [[ $? == 0 ]];then</span><br><span class="line">            coredns_img=$(echo $&#123;imagename&#125;|grep &quot;/&quot;|awk -F&#x27;/&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">            docker pull $&#123;china_img_url&#125;/$&#123;coredns_img&#125;</span><br><span class="line">            docker tag $&#123;china_img_url&#125;/$&#123;coredns_img&#125; $&#123;k8s_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">            docker rmi $&#123;china_img_url&#125;/$&#123;coredns_img&#125;</span><br><span class="line">        else</span><br><span class="line">            docker pull $&#123;china_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">            docker tag $&#123;china_img_url&#125;/$&#123;imagename&#125; $&#123;k8s_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">            docker rmi $&#123;china_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">        fi</span><br><span class="line">        </span><br><span class="line">        # 导出</span><br><span class="line">        # [[ ! -d &quot;/root/kube-images/&quot; ]] &amp;&amp; mkdir -p /root/kube-images/</span><br><span class="line">        # docker save -o /root/kube-images/$&#123;imagename&#125;.tar.gz $&#123;k8s_img_url&#125;/$&#123;imagename&#125;</span><br><span class="line">        # docker rmi $&#123;k8s_img_url&#125;/$imagename&#125;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="8、清理fannel网络方法"><a href="#8、清理fannel网络方法" class="headerlink" title="8、清理fannel网络方法"></a>8、清理fannel网络方法</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ifconfig cni0 down </span><br><span class="line">sudo ip link delete cni0</span><br><span class="line"> </span><br><span class="line">sudo ifconfig flannel.1 down </span><br><span class="line">sudo ip link delete flannel.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据kubeadm reset 提示 删除 /etc/cni/net.d</span></span><br></pre></td></tr></table></figure>
<h5 id="9、开启ipvs"><a href="#9、开启ipvs" class="headerlink" title="9、开启ipvs"></a>9、开启ipvs</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此模式必须安装ipvs内核模块，否则会降级为iptables</span></span><br><span class="line"><span class="comment"># 开启ipvs</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl edit cm kube-proxy -n kube-system</span></span><br><span class="line"><span class="comment"># 修改mode: &quot;ipvs&quot;</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl delete pod -l k8s-app=kube-proxy -n kube-system</span></span><br><span class="line">[root@node1 ~]<span class="comment"># ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.97.97.97:80 rr</span><br><span class="line">  -&gt; 10.244.1.39:80               Masq    1      0          0</span><br><span class="line">  -&gt; 10.244.1.40:80               Masq    1      0          0</span><br><span class="line">  -&gt; 10.244.2.33:80               Masq    1      0          0</span><br></pre></td></tr></table></figure>
<!-- <meta http-equiv="refresh" content="2"> -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb的查询指令find的简单应用</title>
    <url>/2023/08/10/mongodb%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%8C%87%E4%BB%A4find%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="简单查找全部"><a href="#简单查找全部" class="headerlink" title="简单查找全部"></a>简单查找全部</h2><blockquote>
<p>查询全部条数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find() / db.find(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="字段条件简单查找"><a href="#字段条件简单查找" class="headerlink" title="字段条件简单查找"></a>字段条件简单查找</h2><blockquote>
<p>条件查找age为10的字段</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;age:10&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="字段的筛选"><a href="#字段的筛选" class="headerlink" title="字段的筛选"></a>字段的筛选</h2><blockquote>
<p>查找全部条数，并且值保留age字段，会自带_id字段，因为数据库的默认添加</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;&#125;,&#123;age:1&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>去掉_id字段，只保留age字段</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;&#125;,&#123;_id:0,age:1&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>过滤掉age与sex字段，保留剩余字段</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;&#125;,&#123;age:0,sex:0&#125;) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>只保留age与sex字段</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;&#125;,&#123;age:1,sex:1&#125;) </span><br></pre></td></tr></table></figure>

<p><strong>注意，除了_id字段之外，其余字段不可以在有字段为1的情况下设置为0</strong></p>
<h2 id="条件查找"><a href="#条件查找" class="headerlink" title="条件查找"></a>条件查找</h2><blockquote>
<p><strong>符号</strong></p>
<p>gt  大于<br>lt 小于<br>gte 大于等于<br>lte 小于等于</p>
</blockquote>
<blockquote>
<p>查找当前文档中age字段大于等于20的信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;age:&#123;<span class="variable">$gte</span>:20&#125;&#125;) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>查找文档中age字段小于20的信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.find(&#123;age:&#123;<span class="variable">$lt</span>:20&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="多条件查找"><a href="#多条件查找" class="headerlink" title="多条件查找"></a>多条件查找</h2><p><strong>符号</strong></p>
<p><strong>and 且 (他用于模糊条件且)</strong></p>
<blockquote>
<p>查询文档中age字段大于5且age字段小于20的信息</p>
<p>语法 $and:[条件1,条件2,…]</p>
<p>他是直接查询符合数组所有条件的信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;<span class="variable">$and</span>:[&#123;age:&#123;<span class="variable">$gte</span>:5&#125;&#125;,&#123;age:&#123;<span class="variable">$lte</span>:20&#125;&#125;]&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>$in 存在</strong></p>
<blockquote>
<p>他用于精准匹配值，类似枚举</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;<span class="variable">$in</span>:[1,2,3,5,7]&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>$or 或</strong></p>
<blockquote>
<p>db.user.find({KaTeX parse error: Expected ‘}’, got ‘EOF’ at end of input: or:[{age:{lte:5}},{age:{$gte:10}}]})</p>
<p>只要符合给定条件中的一个，就匹配成功</p>
</blockquote>
<p><strong>regex 正则查找</strong></p>
<p>db.user.find({name:&#x2F;3&#x2F;i}) 正则查找name字段中含有’3’的字符串</p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote>
<p>根据字段对信息进行排序</p>
<p>要先查找到数据在进行排序操作，根据age字段进行升序排序，-1为降序排序。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.find().<span class="built_in">sort</span>(&#123;age:1&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="跳过与查找个数"><a href="#跳过与查找个数" class="headerlink" title="跳过与查找个数"></a>跳过与查找个数</h2><p><strong>count 数量</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.find().count()</span><br></pre></td></tr></table></figure>

<p><strong>skip 跳过</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.find().skip(4)</span><br></pre></td></tr></table></figure>

<p><strong>limit 查找信息数量</strong></p>
<blockquote>
<p>它规定只查找几条</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.find().<span class="built_in">limit</span>(3)</span><br></pre></td></tr></table></figure>

<h2 id="查找信息自增"><a href="#查找信息自增" class="headerlink" title="查找信息自增"></a>查找信息自增</h2><p><strong>$inc 字段自增</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.user.updateOne(&#123;name:<span class="string">&#x27;ceshi10&#x27;</span>&#125;,&#123;<span class="variable">$inc</span>:&#123;age:1&#125;&#125;) 查询到信息，age字段随着每次更新自增</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftp之docker版</title>
    <url>/2023/08/24/vsftp%E4%B9%8Bdocker%E7%89%88/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>服务器参数：</p>
<ul>
<li>CentOS Linux release 7.9.2009 (Core)</li>
<li>4核（vCPU）8GB</li>
</ul>
<p>防火墙：关闭<br>SELINUX：SELINUX&#x3D;disabled<br>软件环境：</p>
<ul>
<li>docker版本：20.10.22</li>
<li>docker-compose版本：2.15.1</li>
<li><strong>本文用户和密码均为：test123456，使用时请修改，注意安全！！！</strong></li>
</ul>
<h3 id="一、vsftp"><a href="#一、vsftp" class="headerlink" title="一、vsftp"></a>一、vsftp</h3><h5 id="1、创建目录"><a href="#1、创建目录" class="headerlink" title="1、创建目录"></a>1、创建目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本次操作路径为：/root/service_yaml/ftp_share</span></span><br><span class="line">cd /root/service_yaml/ftp_share</span><br><span class="line">mkdir -p data</span><br></pre></td></tr></table></figure>

<h5 id="2、vsftp-share-yml"><a href="#2、vsftp-share-yml" class="headerlink" title="2、vsftp-share.yml"></a>2、vsftp-share.yml</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">vsftp-share.yml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">ftp-share:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">fauria/vsftpd</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:20:20&quot;</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:21:21&quot;</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;8800:8800&quot;</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">FTP_USER=test123456</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">FTP_PASS=test123456</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">PASV_ENABLE=YES</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">PASV_ADDRESS=127.0.0.1</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">PASV_MIN_PORT=8800</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">PASV_MAX_PORT=8800</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">ANON_ENABLE=NO</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">NO_ANON_PASSWD=NO</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">ANON_ROOT=/var/ftp</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">LOCAL_ENABLE=YES</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">ANONYMOUS_ENABLE=NO</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="comment"># 此处的/home/vsftpd/admin 中的admin需要和FTP_USER的值保持一致</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">./data:/home/vsftpd/admin</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Etc/GMT-8:/etc/localtime</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">container_name:</span> <span class="string">ftp-share</span></span><br><span class="line">     <span class="attr">networks:</span></span><br><span class="line">       <span class="attr">ftp:</span></span><br><span class="line">         <span class="attr">aliases:</span></span><br><span class="line">           <span class="bullet">-</span> <span class="string">ftp-share</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">   <span class="attr">ftp:</span></span><br><span class="line">     <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h5 id="2、启动-vsftp-share-yml"><a href="#2、启动-vsftp-share-yml" class="headerlink" title="2、启动 vsftp-share.yml"></a>2、启动 vsftp-share.yml</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line">curl -kL https://github.com/docker/compose/releases/download/v1.25.4/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 加入执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 查看docker-compose版本</span></span><br><span class="line">docker-compose -v</span><br><span class="line"><span class="comment"># 离线下载</span></span><br><span class="line"><span class="comment"># 到github release中下载我们的docker-compose</span></span><br><span class="line">https://github.com/docker/compose/releases</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose -f vsftp-share.yml up -d</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">docker-compose -f vsftp-share.yml down</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">docker-compose -f vsftp-share.yml ps</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">docker-compose -f vsftp-share.yml logs</span><br></pre></td></tr></table></figure>

<h5 id="3、一条命令完事"><a href="#3、一条命令完事" class="headerlink" title="3、一条命令完事"></a>3、一条命令完事</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/service_yaml/ftp_share</span><br><span class="line"></span><br><span class="line">docker run -dit --name ftp-share \</span><br><span class="line">-p 20:20 -p 21:21 -p 8800:8800 \</span><br><span class="line">-v ./data:/home/vsftpd/admin \</span><br><span class="line">-v /usr/share/zoneinfo/Etc/GMT-8:/etc/localtime \</span><br><span class="line">-e FTP_USER=test123456 \</span><br><span class="line">-e FTP_PASS=test123456 \</span><br><span class="line">-e PASV_ENABLE=YES \</span><br><span class="line">-e PASV_ADDRESS=127.0.0.1 \</span><br><span class="line">-e PASV_MIN_PORT=8800 \</span><br><span class="line">-e PASV_MAX_PORT=8800 \</span><br><span class="line">-e ANON_ENABLE=NO \</span><br><span class="line">-e NO_ANON_PASSWD=NO \</span><br><span class="line">-e ANON_ROOT=/var/ftp \</span><br><span class="line">-e LOCAL_ENABLE=YES \</span><br><span class="line">-e ANONYMOUS_ENABLE=NO \</span><br><span class="line">fauria/vsftpd</span><br></pre></td></tr></table></figure>

<h5 id="访问："><a href="#访问：" class="headerlink" title="访问："></a>访问：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp://47.102.47.151/</span><br></pre></td></tr></table></figure>
<h3 id="二、nginx-vsftp版"><a href="#二、nginx-vsftp版" class="headerlink" title="二、nginx-vsftp版"></a>二、nginx-vsftp版</h3><h5 id="1、创建目录-1"><a href="#1、创建目录-1" class="headerlink" title="1、创建目录"></a>1、创建目录</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本次操作路径为：/root/service_yaml/ftp_share</span></span><br><span class="line"><span class="built_in">cd</span> /root/service_yaml/ftp_share</span><br><span class="line"><span class="built_in">mkdir</span> -p data nginx/conf.d <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h5 id="2、创建-nginx-配置文件：nginx-nginx-conf"><a href="#2、创建-nginx-配置文件：nginx-nginx-conf" class="headerlink" title="2、创建 nginx 配置文件：nginx&#x2F;nginx.conf"></a>2、创建 nginx 配置文件：nginx&#x2F;nginx.conf</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; nginx/nginx.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">user root;</span></span><br><span class="line"><span class="string">worker_processes auto;</span></span><br><span class="line"><span class="string">error_log /var/log/nginx/error.log;</span></span><br><span class="line"><span class="string">pid /var/run/nginx.pid;</span></span><br><span class="line"><span class="string">include /usr/share/nginx/modules/*.conf;</span></span><br><span class="line"><span class="string">events &#123;</span></span><br><span class="line"><span class="string">    worker_connections 1024;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">http &#123;</span></span><br><span class="line"><span class="string">    log_format  main  &#x27;\$remote_addr - \$remote_user [\$time_local] &quot;\$request&quot; &#x27;</span></span><br><span class="line"><span class="string">                      &#x27;\$status \$body_bytes_sent &quot;\$http_referer&quot; &#x27;</span></span><br><span class="line"><span class="string">                      &#x27;&quot;\$http_user_agent&quot; &quot;\$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"><span class="string">    access_log  /var/log/nginx/access.log  main;</span></span><br><span class="line"><span class="string">    sendfile            on;</span></span><br><span class="line"><span class="string">    tcp_nopush          on;</span></span><br><span class="line"><span class="string">    tcp_nodelay         on;</span></span><br><span class="line"><span class="string">    keepalive_timeout   65;</span></span><br><span class="line"><span class="string">    types_hash_max_size 2048;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    default_type        application/octet-stream;</span></span><br><span class="line"><span class="string">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line"><span class="string">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line"><span class="string">    # for more information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="string">    server &#123;</span></span><br><span class="line"><span class="string">        listen 80;</span></span><br><span class="line"><span class="string">        server_name  _;</span></span><br><span class="line"><span class="string">        root    /usr/share/nginx/html/download;</span></span><br><span class="line"><span class="string">        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="string">        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="string">        # limit_rate 50k;# 限制下载速度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        location / &#123;</span></span><br><span class="line"><span class="string">          auth_basic &quot;登陆验证&quot;;</span></span><br><span class="line"><span class="string">          auth_basic_user_file /usr/local/nginx/htpasswd;</span></span><br><span class="line"><span class="string">          autoindex on;    #开启索引功能</span></span><br><span class="line"><span class="string">          autoindex_exact_size off;  #关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb）</span></span><br><span class="line"><span class="string">          autoindex_localtime on;   #显示本机时间而非 GMT 时间</span></span><br><span class="line"><span class="string">          charset utf-8,gbk;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        error_page 404 /404.html;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        location = /40x.html &#123;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        location = /50x.html &#123;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h5 id="3、创建-nginx-htpasswd"><a href="#3、创建-nginx-htpasswd" class="headerlink" title="3、创建 nginx&#x2F;htpasswd"></a>3、创建 nginx&#x2F;htpasswd</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、法1：</span><br><span class="line">yum -y install httpd-devel</span><br><span class="line">htpasswd -cm nginx/htpasswd test123456</span><br><span class="line"><span class="comment"># 输入两次密码：例如：test123456</span></span><br><span class="line"></span><br><span class="line">2、法2：</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;test123456:<span class="subst">$(openssl passwd -crypt test123456)</span>\n&quot;</span> &gt;&gt; nginx/htpasswd</span><br><span class="line"><span class="built_in">cat</span> nginx/htpasswd</span><br></pre></td></tr></table></figure>
<h5 id="4、nginx-vsftp-share-yml"><a href="#4、nginx-vsftp-share-yml" class="headerlink" title="4、nginx-vsftp-share.yml"></a>4、nginx-vsftp-share.yml</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">nginx-vsftp-share.yml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ftp-nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.6-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ftp-nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/sharefiles:/usr/share/nginx/html/download</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/htpasswd:/usr/local/nginx/htpasswd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./log:/var/log/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Etc/GMT-8:/etc/localtime</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">ftp:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">nginx-share</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ftp-share:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">fauria/vsftpd</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ftp-share</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FTP_USER=test123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FTP_PASS=test123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_ENABLE=YES</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_ADDRESS=127.0.0.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_MIN_PORT=8800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_MAX_PORT=8800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ANON_ENABLE=NO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NO_ANON_PASSWD=NO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ANON_ROOT=/var/ftp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOCAL_ENABLE=YES</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ANONYMOUS_ENABLE=NO</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 此处的/home/vsftpd/test123456 中的test123456需要和FTP_USER的值保持一致</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/sharefiles:/home/vsftpd/test123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Etc/GMT-8:/etc/localtime</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;20:20&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;21:21&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8800:8800&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">ftp:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ftp-share</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">   <span class="attr">ftp:</span></span><br><span class="line">     <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h5 id="5、启动-nginx-vsftp-share-yml"><a href="#5、启动-nginx-vsftp-share-yml" class="headerlink" title="5、启动 nginx-vsftp-share.yml"></a>5、启动 nginx-vsftp-share.yml</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line">curl -kL https://github.com/docker/compose/releases/download/2.15.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 加入执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 查看docker-compose版本</span></span><br><span class="line">docker-compose -v</span><br><span class="line"><span class="comment"># 离线下载</span></span><br><span class="line"><span class="comment"># 到github release中下载我们的docker-compose</span></span><br><span class="line">https://github.com/docker/compose/releases</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose -f nginx-vsftp-share.yml up -d</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">docker-compose -f nginx-vsftp-share.yml down</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">docker-compose -f nginx-vsftp-share.yml ps</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">docker-compose -f nginx-vsftp-share.yml logs</span><br></pre></td></tr></table></figure>
<h5 id="6、一条命令完事"><a href="#6、一条命令完事" class="headerlink" title="6、一条命令完事"></a>6、一条命令完事</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、vsftp</span><br><span class="line"><span class="built_in">cd</span> /root/service_yaml/ftp_share</span><br><span class="line"></span><br><span class="line">docker run -dit --name ftp-share \</span><br><span class="line">-p 20:20 -p 21:21 -p 8800:8800 \</span><br><span class="line">-v ./data:/home/vsftpd/test123456 \</span><br><span class="line">-v /usr/share/zoneinfo/Etc/GMT-8:/etc/localtime \</span><br><span class="line">-e FTP_USER=test123456 \</span><br><span class="line">-e FTP_PASS=test123456 \</span><br><span class="line">-e PASV_ENABLE=YES \</span><br><span class="line">-e PASV_ADDRESS=127.0.0.1 \</span><br><span class="line">-e PASV_MIN_PORT=8800 \</span><br><span class="line">-e PASV_MAX_PORT=8800 \</span><br><span class="line">-e ANON_ENABLE=NO \</span><br><span class="line">-e NO_ANON_PASSWD=NO \</span><br><span class="line">-e ANON_ROOT=/var/ftp \</span><br><span class="line">-e LOCAL_ENABLE=YES \</span><br><span class="line">-e ANONYMOUS_ENABLE=NO \</span><br><span class="line">fauria/vsftpd</span><br><span class="line"></span><br><span class="line">2、nginx</span><br><span class="line"><span class="built_in">cd</span> /root/service_yaml/ftp_share</span><br><span class="line"></span><br><span class="line">docker run -dit --name ftp-nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v ./data:/usr/share/nginx/html/download \</span><br><span class="line">-v ./nginx/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v ./nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v ./nginx/htpasswd:/usr/local/nginx/htpasswd \</span><br><span class="line">-v ./log:/var/log/nginx \</span><br><span class="line">-v /usr/share/zoneinfo/Etc/GMT-8:/etc/localtime \</span><br><span class="line">nginx:1.21.6-alpine</span><br></pre></td></tr></table></figure>

<h5 id="访问：-1"><a href="#访问：-1" class="headerlink" title="访问："></a>访问：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp://47.102.47.151/</span><br><span class="line">http://47.102.47.151/</span><br><span class="line"></span><br><span class="line">用户/密码：test123456/test123456</span><br><span class="line"></span><br><span class="line">ftp://47.102.47.151/</span><br><span class="line">http://47.102.47.151/</span><br><span class="line">用户/密码：test123456/test123456</span><br></pre></td></tr></table></figure>
<h3 id="三、客户端访问问题"><a href="#三、客户端访问问题" class="headerlink" title="三、客户端访问问题"></a>三、客户端访问问题</h3><h5 id="1、如遇到下面这个问题"><a href="#1、如遇到下面这个问题" class="headerlink" title="1、如遇到下面这个问题"></a>1、如遇到下面这个问题</h5><p><img src="https://gitee.com/j1447443432/blog_img/raw/master/img/vsftp%E4%B9%8Bdocker%E7%89%88/1692855182880.jpg" alt="https://gitee.com/j1447443432/blog_img/raw/master/img/vsftp之docker版/1692855182880.jpg"><br><strong>解决：</strong><br>设置Internet Explorer 开启ftp被动模式<br><img src="https://gitee.com/j1447443432/blog_img/raw/master/img/vsftp%E4%B9%8Bdocker%E7%89%88/1692855273194.jpg" alt="https://gitee.com/j1447443432/blog_img/raw/master/img/vsftp之docker版/1692855273194.jpg"></p>
<h3 id="FAQs"><a href="#FAQs" class="headerlink" title="FAQs"></a>FAQs</h3><h5 id="1、ftp目录下可能出现木马文件（-scr文件或者-lnk文件）"><a href="#1、ftp目录下可能出现木马文件（-scr文件或者-lnk文件）" class="headerlink" title="1、ftp目录下可能出现木马文件（.scr文件或者.lnk文件）"></a>1、ftp目录下可能出现木马文件（.scr文件或者.lnk文件）</h5><ul>
<li><p>清除脚本delete_lnk_scr.sh </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ftp&#x27;s dir</span></span><br><span class="line">path=<span class="string">&quot;/home/sharefiles&quot;</span></span><br><span class="line">key1=<span class="string">&quot;*.scr&quot;</span></span><br><span class="line">key2=<span class="string">&quot;*.lnk&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">find <span class="variable">$&#123;path&#125;</span> -<span class="built_in">type</span> f -name <span class="variable">$&#123;key1&#125;</span> -<span class="built_in">print</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \</span><br><span class="line">find <span class="variable">$&#123;path&#125;</span> -<span class="built_in">type</span> f -name <span class="variable">$&#123;key2&#125;</span> -<span class="built_in">print</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">	start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># action</span></span><br><span class="line">main</span><br></pre></td></tr></table></figure>

</li>
<li><p>解决方法：</p>
<blockquote>
<p>关闭匿名认证</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在ftp-share服务中environment添加</span><br><span class="line">      - LOCAL_ENABLE=YES</span><br><span class="line">      - ANONYMOUS_ENABLE=NO</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync参数说明</title>
    <url>/2023/08/10/rsync%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="一、参数说明"><a href="#一、参数说明" class="headerlink" title="一、参数说明"></a>一、参数说明</h2><h3 id="①-daemon-服务端-模式"><a href="#①-daemon-服务端-模式" class="headerlink" title="①.daemon(服务端)模式:"></a>①.daemon(服务端)模式:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用途: rsync --daemon [选项]...</span><br><span class="line"> </span><br><span class="line">选项</span><br><span class="line">--address=ADDRESS 绑定到指定的地址</span><br><span class="line">--bwlimit=RATE 限制套接字I/O带宽</span><br><span class="line">--config=FILE 不使用默认位置的rsyncd.conf文件,额外指定</span><br><span class="line">-M, --dparam=OVERRIDE 覆盖全局守护进程配置参数</span><br><span class="line">--no-detach 不要进行fork并后台运行</span><br><span class="line">--port=PORT 监听指定的端口</span><br><span class="line">--log-file=FILE 输出日志到指定文件</span><br><span class="line">--log-file-format=FMT 用指定格式更新日志</span><br><span class="line">--sockopts=OPTIONS 指定自定义的TCP选项</span><br><span class="line">-v, --verbose 详细模式输出</span><br><span class="line">-4, --ipv4 偏向于使用IPv4</span><br><span class="line">-6, --ipv6 偏向于使用IPv6</span><br><span class="line">--<span class="built_in">help</span> 显示帮助信息</span><br></pre></td></tr></table></figure>

<h3 id="②-普通-客户端-模式"><a href="#②-普通-客户端-模式" class="headerlink" title="②.普通(客户端)模式:"></a>②.普通(客户端)模式:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用途: rsync [OPTION]... SRC [SRC]... DEST</span><br><span class="line">通过远程shell访问方式:</span><br><span class="line">rsync [选项]... [用户名@]HOST:SRC [DEST]</span><br><span class="line">rsync [选项]... SRC [SRC]... [用户名@]HOST:DEST</span><br><span class="line">通过rsync daemon访问方式:</span><br><span class="line">rsync [选项]... [用户名@]HOST::SRC [DEST]</span><br><span class="line">rsync [选项]... SRC [SRC]... [用户名@]HOST::DEST</span><br><span class="line">rsync [选项]... SRC [SRC]... rsync://[用户名@]HOST[:PORT]/DEST</span><br><span class="line">rsync [选项]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br><span class="line"> </span><br><span class="line">请注意，<span class="string">&#x27;:&#x27;</span>会使用ssh来远程连接，而<span class="string">&#x27;::&#x27;</span>以及<span class="string">&#x27;rsync://&#x27;</span>则用于以tcp方式连接一个rsync daemon服务器，这个需要SRC(源),以及包含模块名字的DEST(目的)</span><br><span class="line"> </span><br><span class="line">选项</span><br><span class="line">-v, --verbose 详细模式输出</span><br><span class="line">--info=FLAGS 输出INFO级别</span><br><span class="line">--debug=FLAGS 输出DEBUG级别</span><br><span class="line">--msgs2stderr 用于调试的特殊输出处理</span><br><span class="line">-q, --quiet 忽略非error的输出</span><br><span class="line">--no-motd 忽略Daemon模式的MOTD</span><br><span class="line">-c, --checksum 让自动跳过基于校验和而非默认的修改时间以及文件大小</span><br><span class="line">-a, --archive 归档(压缩)模式,表示以递归方式传输文件,并保持所有文件属性等同于-rlptgoD(无 -H,-A,-X)</span><br><span class="line">--no-OPTION 关闭隐含的选项(例如 --no-D)</span><br><span class="line">-r, --recursive 对子目录以递归模式处理</span><br><span class="line">-R, --relative 使用相对路径信息</span><br><span class="line">--no-implied-dirs 不使用--relative发送隐含的目录</span><br><span class="line">-b, --backup 创建备份,也就是对于目的已经存在有同样的文件名时,将老的文件重新命名为~filename.可以使用--suffix选项来指定不同的备份文件前缀</span><br><span class="line">--backup-dir=DIR 将备份文件(如~filename)存放在指定目录下</span><br><span class="line">--suffix=SUFFIX 定义备份文件前缀,默认是~</span><br><span class="line">-u, --update 仅仅进行更新,也就是跳过所有已经存在于DST,并且文件时间晚于要备份的文件(不覆盖更新的文件)</span><br><span class="line">--inplace update destination files in-place (SEE MAN PAGE)</span><br><span class="line">--append 将数据附加到较短的文件</span><br><span class="line">--append-verify 类似--append,但是对旧数据会计算校验和</span><br><span class="line">-d, --<span class="built_in">dirs</span> 不使用递归传输目录</span><br><span class="line">-l, --links 不处理符号链接(保留符号链接)</span><br><span class="line">-L, --copy-links 将符号链接处理为具体的文件或者文件夹</span><br><span class="line">--copy-unsafe-links 只处理不安全的符号链接</span><br><span class="line">--safe-links 忽略不在SRC源目录的符号链接</span><br><span class="line">--munge-links munge符号链接使它们更安全(但会无法使用)</span><br><span class="line">-k, --copy-dirlinks 把指向文件夹的符号链接转换为文件夹</span><br><span class="line">-K, --keep-dirlinks 把接收端的指向文件夹的符号链接当做文件夹</span><br><span class="line">-H, --hard-links 保留硬链接</span><br><span class="line">-p, --perms 保留权限</span><br><span class="line">-E, --executability 保留文件的可执行属性</span><br><span class="line">--<span class="built_in">chmod</span>=CHMOD 影响文件或文件夹的属性</span><br><span class="line">-A, --acls 保留ACLs (代表--perms)</span><br><span class="line">-X, --xattrs 保留扩展属性</span><br><span class="line">-o, --owner 保留所有者(仅限superuser)</span><br><span class="line">-g, --group 保留组</span><br><span class="line">--devices 保留设备文件(仅限superuser)</span><br><span class="line">--copy-devices 把设备文件内容当做文件一样进行复制处理</span><br><span class="line">--specials 保留特殊文件</span><br><span class="line">-D 和--devices --specials一样</span><br><span class="line">-t, --<span class="built_in">times</span> 保留修改时间</span><br><span class="line">-O, --omit-dir-times 忽略文件夹的修改时间</span><br><span class="line">-J, --omit-link-times 忽略符号链接的修改时间</span><br><span class="line">--super 接收端尝试使用superuser进行操作</span><br><span class="line">--fake-super 使用xattrs来存储和恢复权限属性</span><br><span class="line">-S, --sparse 对稀疏文件进行特殊处理以节省空间</span><br><span class="line">--preallocate 在写入前预分配DST文件</span><br><span class="line">-n, --dry-run 执行一个没有实际更改的试运行,只会显示文件会被如何操作</span><br><span class="line">-W, --whole-file 拷贝文件，不进行增量检测</span><br><span class="line">-x, --one-file-system 不要跨越文件系统边界</span><br><span class="line">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节</span><br><span class="line">-e, --rsh=COMMAND 指定使用rsh,ssh方式进行数据同步</span><br><span class="line">--rsync-path=PROGRAM 指定远程服务器上的rsync命令所在路径</span><br><span class="line">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件</span><br><span class="line">--ignore-existing 跳过更新已存在于DST的文件</span><br><span class="line">--remove-source-files 发送方删除非文件夹的源文件</span><br><span class="line">--del --delete-during的一个<span class="built_in">alias</span></span><br><span class="line">--delete 删除那些DST中SRC没有的文件</span><br><span class="line">--delete-before 传输前删除，而非传输过程中</span><br><span class="line">--delete-during 在传输过程中删除</span><br><span class="line">--delete-delay 在传输过程中确定要删除的,在传输结束后进行删除</span><br><span class="line">--delete-after 在传输结束后删除，而非传输过程中</span><br><span class="line">--delete-excluded 同样删除接收端那些被该选项指定排除的文件</span><br><span class="line">--ignore-missing-args 忽略丢失的源参数不输出错误</span><br><span class="line">--delete-missing-args 从DEST删除丢失的源参数</span><br><span class="line">--ignore-errors 即使出现I/O错误也进行删除</span><br><span class="line">--force 即使文件夹非空也强制删除</span><br><span class="line">--max-delete=NUM 不删除超过指定数量的文件</span><br><span class="line">--max-size=SIZE 不传输超过指定大小的文件</span><br><span class="line">--min-size=SIZE 不传输小于指定大小的文件</span><br><span class="line">--partial 保留那些因故没有完全传输的文件,以是加快随后的再次传输(即断点续传)</span><br><span class="line">--partial-dir=DIR 将因故没有完全传输的文件放到指定文件夹</span><br><span class="line">--delay-updates 在传输末尾把所有更新的文件放到位</span><br><span class="line">-m, --prune-empty-dirs 从文件列表中删除空目录链</span><br><span class="line">--numeric-ids 不要把uid/gid值映射为用户/组名</span><br><span class="line">--usermap=STRING 自定义用户名映射</span><br><span class="line">--groupmap=STRING 自定义组名映射</span><br><span class="line">--<span class="built_in">chown</span>=USER:GROUP 简单的用户/组名映射</span><br><span class="line">--<span class="built_in">timeout</span>=SECONDS 设置I/O超时,单位为秒</span><br><span class="line">--contimeout=SECONDS 设置Daemon连接超时,单位为秒</span><br><span class="line">-I, --ignore-times 不跳过那些有同样的时间和大小的文件</span><br><span class="line">-M, --remote-option=OPTION 只把指定选项发送到远端</span><br><span class="line">--size-only 只跳过大小相同的文件</span><br><span class="line">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0</span><br><span class="line">-T, --temp-dir=DIR 在指定文件夹中创建临时文件</span><br><span class="line">-y, --fuzzy 如果DEST没有任何文件,查找类似的文件</span><br><span class="line">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份</span><br><span class="line">--copy-dest=DIR 和上面的类似,但是还会复制指定文件夹中的没有改变的文件</span><br><span class="line">--link-dest=DIR 和上面类似,只是没有改变的文件会被硬链接到DST</span><br><span class="line">-z, --compress 在传输过程中进行压缩</span><br><span class="line">--compress-level=NUM 指定压缩级别0-9,默认为6</span><br><span class="line">--skip-compress=LIST 跳过压缩文件后缀在指定列表中的文件</span><br><span class="line">-C, --cvs-exclude 自动跳过CVS的生成文件</span><br><span class="line">-f, --filter=RULE 添加一个文件过滤规则</span><br><span class="line">-F 等于--filter=<span class="string">&#x27;dir-merge /.rsync-filter&#x27;</span></span><br><span class="line">    重复的: --filter=<span class="string">&#x27;- .rsync-filter&#x27;</span></span><br><span class="line">--exclude=PATTERN 排除符合匹配规则的文件</span><br><span class="line">--exclude-from=FILE 从指定文件中读取需要排除的文件</span><br><span class="line">--include=PATTERN 包含(不排除)符合匹配规则的文件</span><br><span class="line">--include-from=FILE 从指定文件中读取需要包含(不排除)的文件</span><br><span class="line">--files-from=FILE 从指定文件中读取SRC源文件列表</span><br><span class="line">-0, --from0 从文件中读取的文件名以<span class="string">&#x27;\0&#x27;</span>终止</span><br><span class="line">-s, --protect-args 没有空格分隔;只有通配符的特殊字符</span><br><span class="line">--address=ADDRESS 绑定到指定的地址</span><br><span class="line">--port=PORT 指定其他的rsync服务端口</span><br><span class="line">--sockopts=OPTIONS 指定自定义的TCP选项</span><br><span class="line">--blocking-io 对远程shell使用阻塞IO</span><br><span class="line">--stats 提供某些文件的传输状态</span><br><span class="line">-8, --8-bit-output 在输出中留下高比特的字符</span><br><span class="line">-h, --human-readable 用人类可读的格式输出数字</span><br><span class="line">--progress 在传输过程中显示进度</span><br><span class="line">-P 等同于--partial --progress</span><br><span class="line">-i, --itemize-changes 输出对所有更新的变更摘要</span><br><span class="line">--out-format=FORMAT 用指定格式输出更新</span><br><span class="line">--log-file=FILE 将日志保存到指定文件</span><br><span class="line">--log-file-format=FMT 用指定格式更新日志</span><br><span class="line">--password-file=FILE 从文件读取Daemon服务器密码</span><br><span class="line">--list-only 不复制而是只列出</span><br><span class="line">--bwlimit=RATE 限制套接字I/O带宽</span><br><span class="line">--outbuf=N|L|B 设置输出缓冲,为None,Line或者Block</span><br><span class="line">--write-batch=FILE 写入批量更新到指定文件</span><br><span class="line">--only-write-batch=FILE 和上面类似,但是对DST进行只写的更新</span><br><span class="line">--read-batch=FILE 从指定文件读取一个批量更新</span><br><span class="line">--protocol=NUM 强制使用指定的老版本协议</span><br><span class="line">--iconv=CONVERT_SPEC 对文件名进行字符编码转换</span><br><span class="line">--checksum-seed=NUM 设置块/文件的校验和种子</span><br><span class="line">-4, --ipv4 偏向于使用IPv4</span><br><span class="line">-6, --ipv6 偏向于使用IPv6</span><br><span class="line">--version 打印版本号</span><br><span class="line">(-h) --<span class="built_in">help</span> 显示帮助信息</span><br></pre></td></tr></table></figure>

<h2 id="二、服务端配置"><a href="#二、服务端配置" class="headerlink" title="二、服务端配置"></a>二、服务端配置</h2><blockquote>
<p>服务端配置文件默认位置&#x2F;etc&#x2F;rsyncd.conf</p>
</blockquote>
<h3 id="1、分为两块，最开头的是全局参数，部分可以由daemon进程运行参数覆盖，如下"><a href="#1、分为两块，最开头的是全局参数，部分可以由daemon进程运行参数覆盖，如下" class="headerlink" title="1、分为两块，最开头的是全局参数，部分可以由daemon进程运行参数覆盖，如下"></a>1、分为两块，最开头的是全局参数，部分可以由daemon进程运行参数覆盖，如下</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>address</td>
<td>在独立运行时，用于指定的服务器运行的 IP 地址。由 xinetd 运行时将忽略此参数，使用命令行上的 –address 选项替代。</td>
<td>本地所有IP</td>
</tr>
<tr>
<td>port</td>
<td>指定 <a href="http://www.senra.me/tag/rsync/">rsync</a> 守护进程监听的端口号。 由 xinetd 运行时将忽略此参数，使用命令行上的–port 选项替代。</td>
<td>873</td>
</tr>
<tr>
<td>motd file</td>
<td>指定一个消息文件，当客户连接服务器时该文件的内容显示给客户。</td>
<td>无</td>
</tr>
<tr>
<td>pid file</td>
<td><a href="http://www.senra.me/tag/rsync/">rsync</a> 的守护进程将其 PID 写入指定的文件。</td>
<td>无</td>
</tr>
<tr>
<td>log file</td>
<td>指定 <a href="http://www.senra.me/tag/rsync/">rsync</a> 守护进程的日志文件，而不将日志发送给 syslog。</td>
<td>无</td>
</tr>
<tr>
<td>syslog facility</td>
<td>指定 <a href="http://www.senra.me/tag/rsync/">rsync</a> 发送日志消息给 syslog 时的消息级别。</td>
<td>daemon</td>
</tr>
<tr>
<td>socket options</td>
<td>指定自定义 TCP 选项。</td>
<td>无</td>
</tr>
</tbody></table>
<h3 id="2、另外的就是模块参数了"><a href="#2、另外的就是模块参数了" class="headerlink" title="2、另外的就是模块参数了"></a>2、另外的就是模块参数了</h3><h5 id="2-1、基础参数"><a href="#2-1、基础参数" class="headerlink" title="2.1、基础参数"></a>2.1、基础参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>path</td>
<td>指定当前模块在 <a href="http://www.senra.me/tag/rsync/">rsync</a> 服务器上的同步路径，该参数是必须指定的。</td>
<td>无</td>
</tr>
<tr>
<td>comment</td>
<td>给模块指定一个描述，该描述连同模块名在客户连接得到模块列表时显示给客户。</td>
<td>无</td>
</tr>
</tbody></table>
<h5 id="2-2、控制参数"><a href="#2-2、控制参数" class="headerlink" title="2.2、控制参数"></a>2.2、控制参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>use chroot</td>
<td>若为 true，则 <a href="http://www.senra.me/tag/rsync/">rsync</a> 在传输文件之前首先 chroot 到 path 参数所指定的目录下。这样做的原因是实现额外的安全防护，但是缺点是需要 root 权限，并且不能备份指向 path 外部的符号连接所指向的目录文件。</td>
<td>true</td>
</tr>
<tr>
<td>uid</td>
<td>指定该模块以指定的 UID 传输文件。</td>
<td>nobody</td>
</tr>
<tr>
<td>gid</td>
<td>指定该模块以指定的 GID 传输文件。</td>
<td>nobody</td>
</tr>
<tr>
<td>max connections</td>
<td>指定该模块的最大并发连接数量以保护服务器，超过限制的连接请求将被告知随后再试。</td>
<td>0（没有限制）</td>
</tr>
<tr>
<td>lock file</td>
<td>指定支持 max connections 参数的锁文件。</td>
<td>&#x2F;var&#x2F;run&#x2F;rsyncd.lock</td>
</tr>
<tr>
<td>list</td>
<td>指定当客户请求列出可以使用的模块列表时，该模块是否应该被列出。如果设置该选项为 false，可以创建隐藏的模块。</td>
<td>true</td>
</tr>
<tr>
<td>read only</td>
<td>指定是否允许客户上传文件。若为 true 则不允许上传；若为 false 并且服务器目录也具有读写权限则允许上传。</td>
<td>true</td>
</tr>
<tr>
<td>write only</td>
<td>指定是否允许客户下载文件。若为 true 则不允许下载；若为 false 并且服务器目录也具有读权限则允许下载。</td>
<td>false</td>
</tr>
<tr>
<td>ignore errors</td>
<td>指定 在 <a href="http://www.senra.me/tag/rsync/">rsync</a> 服务器上运行 delete 操作时是否忽略 I&#x2F;O 错误。一般来说 <a href="http://www.senra.me/tag/rsync/">rsync</a> 在出现 I&#x2F;O 错误时将将跳过 –delete 操作，以防止因为暂时的资源不足或其它 I&#x2F;O 错误导致的严重问题。</td>
<td>true</td>
</tr>
<tr>
<td>ignore nonreadable</td>
<td>指定 rysnc 服务器完全忽略那些用户没有访问权限的文件。这对于在需要备份的目录中有些不应该被备份者获得的文件时是有意义的。</td>
<td>false</td>
</tr>
<tr>
<td>timeout</td>
<td>该选项可以覆盖客户指定的 IP 超时时间。从而确保 <a href="http://www.senra.me/tag/rsync/">rsync</a> 服务器不会永远等待一个崩溃的客户端。对于匿名 <a href="http://www.senra.me/tag/rsync/">rsync</a> 服务器来说，理想的数字是 600（单位为秒）。</td>
<td>0 (未限制)</td>
</tr>
<tr>
<td>dont compress</td>
<td>用来指定那些在传输之前不进行压缩处理的文件。该选项可以定义一些不允许客户对该模块使用的命令选项列表。必须使用选项全名，而不能是简称。当发生拒绝某个选项的情况时，服务器将报告错误信息然后退出。例如，要防止使用压缩，应该是：”dont compress &#x3D; *”。</td>
<td>*.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz</td>
</tr>
</tbody></table>
<h5 id="2-3、文件过滤参数"><a href="#2-3、文件过滤参数" class="headerlink" title="2.3、文件过滤参数"></a>2.3、文件过滤参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>exclude</td>
<td>指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 exclude 列表中。这等同于在客户端命令中使用 –exclude 来指定模式。</td>
<td>空</td>
</tr>
<tr>
<td>exclude from</td>
<td>指定一个包含 exclude 规则定义的文件名，服务器从该文件中读取 exclude 列表定义。</td>
<td>空</td>
</tr>
<tr>
<td>include</td>
<td>指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 include 列表中。这等同于在客户端命令中使用 –include 来指定模式 。</td>
<td>空</td>
</tr>
<tr>
<td>include from</td>
<td>指定一个包含 include 规则定义的文件名，服务器从该文件中读取 include 列表定义。</td>
<td>空</td>
</tr>
</tbody></table>
<ul>
<li>一个模块只能指定一个 exclude 参数、一个 include 参数。</li>
<li>结合 include 和 exclude 可以定义复杂的 exclude&#x2F;include 规则 。</li>
<li>这几个参数分别与相应的 <a href="http://www.senra.me/tag/rsync/">rsync</a> 客户命令选项等价，唯一不同的是它们作用在服务器端。</li>
</ul>
<h5 id="2-4、用户认证参数"><a href="#2-4、用户认证参数" class="headerlink" title="2.4、用户认证参数"></a>2.4、用户认证参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>auth users</td>
<td>指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块。这里的用户和系统用户没有任何关系。用户名和口令以明文方式存放在 secrets file 参数指定的文件中。</td>
<td>(匿名方式)</td>
</tr>
<tr>
<td>secrets file</td>
<td>指定一个 <a href="http://www.senra.me/tag/rsync/">rsync</a> 认证口令文件。只有在 auth users 被定义时，该文件才起作用。</td>
<td>空</td>
</tr>
<tr>
<td>strict modes</td>
<td>指定是否监测口令文件的权限。若为 true 则口令文件只能被 rsync 服务器运行身份的用户访问，其他任何用户不可以访问该文件。</td>
<td>true</td>
</tr>
</tbody></table>
<ul>
<li>rsync 认证口令文件的权限一定是 600，否则客户端将不能连接服务器。</li>
<li>rsync 认证口令文件中每一行指定一个”用户名:口令”对，格式为：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 &quot;#&quot; 开始的行为注释行</span></span><br><span class="line">username:passwd</span><br><span class="line"><span class="comment"># 一般来说口令最好不要超过8个字符。</span></span><br></pre></td></tr></table></figure>

<h5 id="2-5、访问控制参数"><a href="#2-5、访问控制参数" class="headerlink" title="2.5、访问控制参数"></a>2.5、访问控制参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>hosts allow</td>
<td>用一个主机列表指定哪些主机客户允许连接该模块。不匹配主机列表的主机将被拒绝。</td>
<td>*</td>
</tr>
<tr>
<td>hosts deny</td>
<td>用一个主机列表指定哪些主机客户不允许连接该模块。</td>
<td>空</td>
</tr>
</tbody></table>
<p>客户主机列表定义可以是以下形式：</p>
<ul>
<li>单个IP地址。例如：192.168.0.1</li>
<li>整个网段。例如：192.168.0.0&#x2F;24，192.168.0.0&#x2F;255.255.255.0</li>
<li>可解析的单个主机名。例如：<a href="http://www.senra.me/tag/centos/">centos</a>，centos.smartraining.cn</li>
<li>域内的所有主机。例如：*.smartraining.cn</li>
<li>“*”则表示所有。</li>
<li>多个列表项要用空格间隔。</li>
</ul>
<h5 id="2-6、日志参数"><a href="#2-6、日志参数" class="headerlink" title="2.6、日志参数"></a>2.6、日志参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>transfer logging</td>
<td>使 rsync 服务器将传输操作记录到传输日志文件。</td>
<td>false</td>
</tr>
<tr>
<td>log format</td>
<td>指定传输日志文件的字段。</td>
<td>”%o %h [%a] %m (%u) %f %l”</td>
</tr>
</tbody></table>
<p>设置了”log file”参数时，在日志每行的开始会添加”%t [%p]“。</p>
<ul>
<li>可以使用的日志格式定义符如下所示：<ul>
<li>%a - 远程IP地址</li>
<li>%h - 远程主机名</li>
<li>%l - 文件长度字符数</li>
<li>%p - 该次 rsync 会话的 PID</li>
<li>%o - 操作类型：”send” 或 “recv”</li>
<li>%f - 文件名</li>
<li>%P - 模块路径</li>
<li>%m - 模块名</li>
<li>%t - 当前时间</li>
<li>%u - 认证的用户名（匿名时是 null）</li>
<li>%b - 实际传输的字节数</li>
<li>%c - 当发送文件时，记录该文件的校验码</li>
</ul>
</li>
</ul>
<p>这部分是网上看得，实在懒得翻译man了，具体来源完全不知道，我看到那位仁兄也是转载来的……</p>
<p>这儿拿我前一篇文章写的举个栗子方便解释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;/etc/rsyncd.conf&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">#指定传输文件时守护进程具有的用户ID,这里表示默认为nobady</span></span><br><span class="line">uid=nobady</span><br><span class="line"><span class="comment">#指定传输文件时守护进程具有的用户组ID,这里表示默认为nobady</span></span><br><span class="line">gid=nobody</span><br><span class="line"><span class="comment">#禁止切换目录</span></span><br><span class="line">use <span class="built_in">chroot</span>=no</span><br><span class="line"><span class="comment">#客户端的最大连接数</span></span><br><span class="line">max connection=10</span><br><span class="line"><span class="comment">#检查口令文件的权限,口令文件的权限用户属组必须是root,权限必须是600</span></span><br><span class="line">strict modes=<span class="built_in">yes</span></span><br><span class="line"><span class="comment">#pid文件的位置</span></span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line"><span class="comment">#lock文件的位置</span></span><br><span class="line">lock file=/var/run/rsyncd.lock</span><br><span class="line"><span class="comment">#日志文件的位置</span></span><br><span class="line"><span class="built_in">log</span> file=/var/log/rsyncd.log</span><br><span class="line"> </span><br><span class="line"><span class="comment">#定义模块名,这玩意就是客户端命令跟在IP后面的,作为DST的一部分</span></span><br><span class="line">[plex]</span><br><span class="line"><span class="comment">#指定这个模块需要同步的路径,或者说作为base目录</span></span><br><span class="line">path=/home/plex/movie</span><br><span class="line"><span class="comment">#这个是注释 可以自己定义</span></span><br><span class="line">comment=plex library</span><br><span class="line"><span class="comment">#忽略一些无关的IO错误</span></span><br><span class="line">ignore errors</span><br><span class="line"><span class="comment">#no代表客户端可以上传文件,yes表示只读取</span></span><br><span class="line"><span class="built_in">read</span> only=no</span><br><span class="line"><span class="comment">#no表示客户端可以下载文件,yes表示不能下载</span></span><br><span class="line">write only=no</span><br><span class="line"><span class="comment">#表示允许连接的主机地址</span></span><br><span class="line">hosts allow=1.2.3.4</span><br><span class="line"><span class="comment">#表示不允许连接的主机地址</span></span><br><span class="line">hosts deny=*</span><br><span class="line"><span class="comment">#不允许该模块被客户端列出</span></span><br><span class="line">list=<span class="literal">false</span></span><br><span class="line"><span class="comment">#指定传输文件时守护进程具有的用户ID,</span></span><br><span class="line">uid=root</span><br><span class="line"><span class="comment">#指定传输文件时守护进程具有的用户组ID,</span></span><br><span class="line">gid=root</span><br><span class="line"><span class="comment">#用来指定连接该模块的用户名,用户名可以自定义，这个是客户端命令跟在IP前面那个</span></span><br><span class="line">auth <span class="built_in">users</span>=plex</span><br><span class="line"><span class="comment">#指定密码文件,文件里面记录的是用户名:密码</span></span><br><span class="line">secrets file=/etc/srs.pass</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;用户名:密码&quot;</span> &gt;/etc/srs.pass</span><br><span class="line"><span class="comment">#权限必须600，不然GG</span></span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/srs.pass</span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rsync --daemon --config=/etc/rsyncd.conf&quot;</span> &gt;&gt;/etc/rc.local</span><br><span class="line"><span class="comment">#立即运行服务端,其实这儿的配置文件位置就是默认的，可以不加--config</span></span><br><span class="line">rsync --daemon --config=/etc/rsyncd.conf</span><br></pre></td></tr></table></figure>

<h2 id="三、客户端命令"><a href="#三、客户端命令" class="headerlink" title="三、客户端命令"></a>三、客户端命令</h2><blockquote>
<p>如果配置了密码，请务必先丢个密码文件，然后保证它的权限为600</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;密码&quot;</span> &gt;/etc/rsyncd.pass</span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/rsyncd.pass</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样能列出服务端可同步的文件(如果搞单向同步你肯定就用不着这个了</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync --list-only --password-file=/etc/rsyncd.pass plex@1.2.3.4::plex</span><br><span class="line">rsync --list-only --password-file=/etc/rsyncd.pass rsync://plex@1.2.3.4/plex</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后手动同步我们可以这样(当然手动是可以不指定password-file的，反正会提示你输密码，如果写到脚本或者crontab里就必须带上了)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avzP --delete --exclude <span class="string">&quot;*.torrent&quot;</span> /home/complete/ plex@1.2.3.4::plex</span><br><span class="line">rsync -avzP --delete /home/complete/ rsync://plex@1.2.3.4/plex</span><br></pre></td></tr></table></figure>

<blockquote>
<p>敲黑板，P参数是给你看着玩的，不然鬼知道同步到啥程度了，写脚本里就别带了，单向传输脚本里如果要那个断点续传请自己做好命令返回状态的判断，因为单向传输是一次性的，如果是同步就没必要了，毕竟你会隔阵子就运行</p>
<p>z是压缩，如果你cpu不行或者需要降低资源消耗，可以带上–compress-level来减小下压缩率，0-9哦，从低到高资源消耗越来越大，当然你也可以不压缩，文本内容我觉得开个1或者2就很给力了</p>
</blockquote>
<h2 id="四、常见错误"><a href="#四、常见错误" class="headerlink" title="四、常见错误"></a>四、常见错误</h2><h4 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@ERROR: <span class="built_in">chroot</span> failed</span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">服务器端的目录不存在或无权限，创建目录并修正权限可解决问题</span><br></pre></td></tr></table></figure>

<h4 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@ERROR: auth failed on module backup</span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">服务器端该模块（backup）需要验证用户名密码，但客户端没有提供正确的用户名密码，认证失败</span><br><span class="line">提供正确的用户名密码解决此问题</span><br></pre></td></tr></table></figure>

<h4 id="问题三："><a href="#问题三：" class="headerlink" title="问题三："></a>问题三：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@ERROR: Unknown module ‘backup<span class="string">&#x27;</span></span><br><span class="line"><span class="string">rsync error: error starting client-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">原因：</span></span><br><span class="line"><span class="string">服务器不存在指定模块。提供正确的模块名或在服务器端修改成你要的模块以解决问题</span></span><br></pre></td></tr></table></figure>

<h4 id="问题四："><a href="#问题四：" class="headerlink" title="问题四："></a>问题四：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">password file must not beother-accessible</span><br><span class="line">continuing without password file</span><br><span class="line">Password:</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">这是因为rsyncd.pwd rsyncd.secrets的权限不对，应该设置为600。如：<span class="built_in">chmod</span> 600 rsyncd.pwd</span><br></pre></td></tr></table></figure>

<h4 id="问题五："><a href="#问题五：" class="headerlink" title="问题五："></a>问题五：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync: failed to connect to218.107.243.2: No route to host (113)</span><br><span class="line">rsync error: error <span class="keyword">in</span> socket IO(code 10) at clientserver.c(104) [receiver=2.6.9]</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">对方没开机、防火墙阻挡、通过的网络上有防火墙阻挡，都有可能。关闭防火墙，其实就是把tcp udp的873端口打开</span><br></pre></td></tr></table></figure>

<h4 id="问题六："><a href="#问题六：" class="headerlink" title="问题六："></a>问题六：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync error: error startingclient-server protocol (code 5) at main.c(1524) [Receiver=3.0.7]</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">/etc/rsyncd.conf配置文件内容有错误。请正确核对配置文件</span><br></pre></td></tr></table></figure>

<h4 id="问题七："><a href="#问题七：" class="headerlink" title="问题七："></a>问题七：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync: <span class="built_in">chown</span> <span class="string">&quot;&quot;</span> failed:Invalid argument (22)</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">权限无法复制。去掉同步权限的参数即可。(这种情况多见于Linux向Windows的时候)</span><br></pre></td></tr></table></figure>

<h4 id="问题八："><a href="#问题八：" class="headerlink" title="问题八："></a>问题八：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@ERROR: daemon security issue –contact admin</span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1530)[sender=3.0.6]</span><br><span class="line"> </span><br><span class="line">原因：</span><br><span class="line">同步的目录里面有软连接文件，需要服务器端的/etc/rsyncd.conf打开use <span class="built_in">chroot</span> = <span class="built_in">yes</span>。掠过软连接文件</span><br></pre></td></tr></table></figure>

<h2 id="五、配合inotify使用"><a href="#五、配合inotify使用" class="headerlink" title="五、配合inotify使用"></a>五、配合inotify使用</h2><blockquote>
<p>inotify我之前在搭建dns来同步配置的时候就用过——&gt;<a href="http://www.senra.me/build-your-own-authoritative-dns-series-powerdns-geoip-backend-multi-nodes/">传送门</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">src=/data/</span><br><span class="line">dst=backup</span><br><span class="line">host=<span class="string">&quot;1.2.3.4&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> inotifywait -rq -e modify,delete,create,attrib <span class="variable">$zonefile</span> &gt;/dev/null; <span class="keyword">do</span></span><br><span class="line">rsync -avz --delete --password-file=/etc/rsync.pass <span class="variable">$src</span> rsync@<span class="variable">$host</span>::<span class="variable">$dst</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;`date &quot;</span>+%Y-%m-%d %H:%M:%S<span class="string">&quot;` File Changed, Synced&quot;</span>&gt;&gt;/tmp/rsync.log</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>简单的一个脚本，可以监控&#x2F;data&#x2F;目录，递归模式，任何修改，删除，创建，修改属性的事件都会触发同步并记录到日志中，对于要自动化处理某些东西挺好用的</p>
</blockquote>
]]></content>
      <categories>
        <category>linux-工具</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>别做低幼巨婴</title>
    <url>/2023/07/31/%E5%88%AB%E5%81%9A%E4%BD%8E%E5%B9%BC%E5%B7%A8%E5%A9%B4/</url>
    <content><![CDATA[<blockquote>
<p>语雀分享：<a href="https://www.yuque.com/xiaojing-fftve/hmizug/bue4x79onupa02nk?singleDoc#">https://www.yuque.com/xiaojing-fftve/hmizug/bue4x79onupa02nk?singleDoc#</a> 《别做低幼巨婴》</p>
</blockquote>
<blockquote>
<p><strong>摘抄自御术的分享，不代表我个人观点。</strong></p>
</blockquote>
<p><strong>推荐你读《奈飞文化手册》</strong></p>
<blockquote>
<p>别做低幼巨婴，当一个成年人，不要整天为面子、为伤害、为自己脆弱的玻璃心使劲。罗斯福夫人讲过一句话特别棒：这个世界上没有人能够伤害你，除非你同意。</p>
<p>世间不公平，付出一定不会有绝对对等的收获，今天亏了明天赚了，只盯着眼前那一点点得失只会让自己永远停留在自设的狭小牢笼中痛苦挣扎。最近没人注意我，最近比较闲，我划会水。我做了那么多，居然「老板」没看到，我下次也不努力了。我明明比他厉害，为啥我得不到那样的待遇，给一分钱出一分力，对得住天地良心 … 这是我遇到的巨婴想法，是不是很形象？是不是你也有过？我想一定有，包括曾经的我也都会有过。但当我想明白一件事情之后就会觉得这些想法极其的低幼而可笑。</p>
<p>世间可是极致的公平，每个人一生唯一拥有又无法拥有的只有时间，一切一切都是时间换来，用时间变现去换取更多时间，或者说时间变现让你的人生效率和质量变高，比如花时间变现为自己的能力是为了以后处理相同的事情可以花更小的时间，花时间变现为钱是让自己可以用钱去换时间（买房买车，住酒店坐飞机…），花时间变现为身体状态活得更久本质就是变现回更多的时间…</p>
<p>我们每个人根本上都只是也只能对自己负责，刻在你身上的时钟启动后就只会停一次，你每时每刻花的一分一秒都是你自己的，这一分一秒的质量怎么样？变现成什么？全是你自己决定的！而每个人人生质量的差距就在这一分一秒的变现叠加中拉开，这是我理解「活着」的奥义，共勉之~</p>
<p>推荐一部很形象的电影《时间规划局》</p>
</blockquote>
]]></content>
      <categories>
        <category>好文章摘要</category>
      </categories>
      <tags>
        <tag>休闲阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>制作Ubuntu16.04离线apt源</title>
    <url>/2023/08/08/%E5%88%B6%E4%BD%9CUbuntu16.04%E7%A6%BB%E7%BA%BFapt%E6%BA%90/</url>
    <content><![CDATA[<h3 id="制作Ubuntu16-04离线apt源"><a href="#制作Ubuntu16-04离线apt源" class="headerlink" title="制作Ubuntu16.04离线apt源"></a>制作Ubuntu16.04离线apt源</h3><h4 id="1-下载离线安装包"><a href="#1-下载离线安装包" class="headerlink" title="1.下载离线安装包"></a>1.下载离线安装包</h4><blockquote>
<p>ubuntu下安装包都会下载到&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives下，首先清空该目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载需要安装包</span></span><br><span class="line">sudo apt-get install -d XX</span><br><span class="line"><span class="comment"># -d：代表只下载不安装，但是如果该机器上已经有该软件，则不会执行</span></span><br></pre></td></tr></table></figure>

<h4 id="2-安装dpkg-dev"><a href="#2-安装dpkg-dev" class="headerlink" title="2.安装dpkg-dev"></a>2.安装dpkg-dev</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dpkg-dev</span><br></pre></td></tr></table></figure>

<h4 id="3-创建源目录"><a href="#3-创建源目录" class="headerlink" title="3.创建源目录"></a>3.创建源目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /XX</span><br></pre></td></tr></table></figure>

<h4 id="4-拷贝离线包到源目录"><a href="#4-拷贝离线包到源目录" class="headerlink" title="4.拷贝离线包到源目录"></a>4.拷贝离线包到源目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /var/cache/apt/archives/*.deb /XX</span><br></pre></td></tr></table></figure>

<h4 id="5-为离线安装包制作索引"><a href="#5-为离线安装包制作索引" class="headerlink" title="5.为离线安装包制作索引"></a>5.为离线安装包制作索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">sudo dpkg-scanpackages XX/ |gzip &gt;XX/Packages.gz </span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行完该命令后会在XX目录生成Packages.gz</p>
</blockquote>
<h4 id="6-将索引加入source-list"><a href="#6-将索引加入source-list" class="headerlink" title="6.将索引加入source.list"></a>6.将索引加入source.list</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> “deb file:/// XX/”&gt;&gt;/etc/apt/source.list</span><br></pre></td></tr></table></figure>

<h4 id="7-更新源"><a href="#7-更新源" class="headerlink" title="7.更新源"></a>7.更新源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="8-安装XX"><a href="#8-安装XX" class="headerlink" title="8.安装XX"></a>8.安装XX</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install XX</span><br></pre></td></tr></table></figure>

<h4 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h4><ul>
<li>apt-get install 连同诸多依赖包一并安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install --install-suggests package</span><br></pre></td></tr></table></figure>

<ul>
<li>如果遇到个别包的版本兼容问题，具体如下</li>
</ul>
<blockquote>
<p>Depends: XXX（&#x3D;YYY） but ZZZ is to be installed</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">zlib1g (= 1:1.2.8.dfsg-2ubuntu4.3) but 1:1.2.11.dfsg-0ubuntu2 is to be installed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法：</span></span><br><span class="line">apt-get install --reinstall zlib1g=1:1.2.8.dfsg-2ubuntu4.3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ubuntu/debian</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
